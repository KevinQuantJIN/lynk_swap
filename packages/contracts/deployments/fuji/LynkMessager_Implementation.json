{
  "address": "0xDA256Fbda650d091f34fCc46Dd0234df0EA31650",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "InvalidRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "OrderPending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        }
      ],
      "name": "OrderWaiting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "messageId",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "sourceChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "sender",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Client.EVMTokenAmount[]",
              "name": "destTokenAmounts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Client.Any2EVMMessage",
          "name": "message",
          "type": "tuple"
        }
      ],
      "name": "ccipReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router_",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "uniswapV2Router_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x630ca9d4a15f55e0b6c59170051a3caa0bc15a16736439fff00fea70289a6cc3",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xba45b3d7A42c3554fa98bDC3F790da2676Cb0560",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "2130901",
    "logsBloom": "0x
    "blockHash": "0x280673462c9846935cb46dd56502e0f6807c8af200af6cbeacfae5642b8208e5",
    "transactionHash": "0x630ca9d4a15f55e0b6c59170051a3caa0bc15a16736439fff00fea70289a6cc3",
    "logs": [],
    "blockNumber": 33672783,
    "cumulativeGasUsed": "2173638",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "699169d1190e180c38f55619a0f33f54",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"OrderPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"OrderWaiting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2Router_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}},\"getRouter()\":{\"returns\":{\"_0\":\"CCIP router address\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"supportsInterface(bytes4)\":{\"details\":\"Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\",\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/LynkMessager.sol\":\"LynkMessager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function _preventExecution() internal view {\\n    // solhint-disable-next-line avoid-tx-origin\\n    if (tx.origin != address(0) && tx.origin != address(0x1111111111111111111111111111111111111111)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    _preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x8c97744adc25cf30d1a2509bff6c0ddc9b36feb75f8e38c85d5c62b8ec773159\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AutomationBase} from \\\"./AutomationBase.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0xce623f3e7fa4addf240032d2817b2b489ac08e79fae14a5cc5850ed3f1acddf8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"src/CCIPReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IAny2EVMMessageReceiver } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\\\";\\nimport { Client } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport { IERC165 } from\\n    \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiverUpgradeable is IAny2EVMMessageReceiver, IERC165 {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct CCIPReceiverStorage {\\n        address _rounter;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"chainlink.storage.CCIPReceiverUpgradeable\\\")) - 1)) &\\n    // ~bytes32(uint256(0xff))\\n    bytes32 private constant CCIPReceiverStorageLocation =\\n        0xb9605d6807cee7e996cb505aab0fff682142fb832cd7587ec7f7258d80300000;\\n\\n    function _getCCIPReceiverStorage() private pure returns (CCIPReceiverStorage storage $) {\\n        assembly {\\n            $.slot := CCIPReceiverStorageLocation\\n        }\\n    }\\n\\n    function __CCIPReceiver_init(address router) internal {\\n        if (router == address(0)) revert InvalidRouter(address(0));\\n        _getCCIPReceiverStorage()._rounter = router;\\n    }\\n\\n    /// @notice IERC165 supports an interfaceId\\n    /// @param interfaceId The interfaceId to check\\n    /// @return true if the interfaceId is supported\\n    /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n    /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n    /// This allows CCIP to check if ccipReceive is available before calling it.\\n    /// If this returns false or reverts, only tokens are transferred to the receiver.\\n    /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n    /// Additionally, if the receiver address does not have code associated with\\n    /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n    function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\\n        return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    /// @inheritdoc IAny2EVMMessageReceiver\\n    function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n        _ccipReceive(message);\\n    }\\n\\n    /// @notice Override this function in your implementation.\\n    /// @param message Any2EVMMessage\\n    function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n    /////////////////////////////////////////////////////////////////////\\n    // Plumbing\\n    /////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Return the current router\\n    /// @return CCIP router address\\n    function getRouter() public view returns (address) {\\n        return address(_getCCIPReceiverStorage()._rounter);\\n    }\\n\\n    error InvalidRouter(address router);\\n\\n    /// @dev only calls from the set router are accepted.\\n    modifier onlyRouter() {\\n        if (msg.sender != address(_getCCIPReceiverStorage()._rounter)) revert InvalidRouter(msg.sender);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x3e5cfbfea8ac621c074d3eea80f6ca735d6b7784903e013887645691ed41b309\",\"license\":\"MIT\"},\"src/LynkMessager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.25;\\n\\nimport { Client } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport { IERC20 } from\\n    \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { IRouterClient } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport { AutomationCompatibleInterface } from \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\n\\nimport { CCIPReceiverUpgradeable } from \\\"./CCIPReceiverUpgradeable.sol\\\";\\nimport { IUniswapV2Router02 } from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ncontract LynkMessager is UUPSUpgradeable, CCIPReceiverUpgradeable, AutomationCompatibleInterface {\\n    struct Order {\\n        bytes data;\\n        bool tried;\\n    }\\n\\n    struct LynkMessagerStorage {\\n        IUniswapV2Router02 uniswapV2Router;\\n        mapping(bytes32 => Order) orders;\\n        bytes32[] pendingOrders;\\n    }\\n\\n    event OrderFilled(bytes32 messageId, address fromToken, uint256 fromAmount, address toToken, uint256 toAmount);\\n\\n    event OrderWaiting(bytes32 messageId, address fromToken, uint256 fromAmount, address toToken);\\n    event OrderPending(bytes32 messageId, bytes data);\\n\\n    function initialize(address router_, IUniswapV2Router02 uniswapV2Router_) external initializer {\\n        __CCIPReceiver_init(router_);\\n\\n        LynkMessagerStorage storage $ = _getLynkMessagerStorage();\\n        $.uniswapV2Router = uniswapV2Router_;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"lynkswap.storage.lynkmessager\\\")) - 1)) & ~ bytes32(uint256(0xff))\\n    bytes32 private constant LynkSwapStorageLocation =\\n        0x976509985809e047515ccc2c69ccb29a3b3da26dc470e8fda630ec865ee4e300;\\n\\n    function checkUpkeep(bytes calldata /* checkData */ )\\n        external\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */ )\\n    {\\n        LynkMessagerStorage storage $ = _getLynkMessagerStorage();\\n\\n        upkeepNeeded = $.pendingOrders.length != 0;\\n    }\\n\\n    function performUpkeep(bytes calldata) external override {\\n        LynkMessagerStorage storage $ = _getLynkMessagerStorage();\\n\\n        if ($.pendingOrders.length == 0) {\\n            revert(\\\"NullPending\\\");\\n        }\\n\\n        // get the last one and pop\\n        bytes32 messageId = $.pendingOrders[$.pendingOrders.length - 1];\\n        $.pendingOrders.pop();\\n\\n        Order storage order = $.orders[messageId];\\n\\n        // each order tried once\\n        if (order.tried) {\\n            revert(\\\"order tried\\\");\\n        }\\n        order.tried = true;\\n\\n        (address[] memory paths, uint256 inAmount, uint256 minOut, address receiver) =\\n            abi.decode(order.data, (address[], uint256, uint256, address));\\n\\n        address inToken = paths[0];\\n        address outToken = paths[paths.length - 1];\\n\\n        //\\n        bytes memory callData = abi.encodeWithSelector(\\n            $.uniswapV2Router.swapExactTokensForTokens.selector, inAmount, minOut, paths, receiver, block.timestamp + 1\\n        );\\n\\n        // approve token\\n        IERC20(inToken).approve(address($.uniswapV2Router), inAmount);\\n\\n        (bool success, bytes memory res) = address($.uniswapV2Router).call(callData);\\n\\n        uint256[] memory amount = abi.decode(res, (uint256[]));\\n\\n        if (success) {\\n            emit OrderFilled(messageId, inToken, inAmount, outToken, amount[1]);\\n        } else {\\n            // save the intention and wait for suitable time\\n            emit OrderWaiting(messageId, inToken, inAmount, outToken);\\n        }\\n    }\\n\\n    // handle a received message\\n    function _ccipReceive(Client.Any2EVMMessage memory any2EvmMessage) internal override {\\n        // save order\\n        LynkMessagerStorage storage $ = _getLynkMessagerStorage();\\n        $.orders[any2EvmMessage.messageId] = Order(any2EvmMessage.data, false);\\n\\n        $.pendingOrders.push(any2EvmMessage.messageId);\\n    }\\n\\n    function _getLynkMessagerStorage() internal pure returns (LynkMessagerStorage storage $) {\\n        assembly {\\n            $.slot := LynkSwapStorageLocation\\n        }\\n    }\\n\\n    // don't add auth for test\\n    function _authorizeUpgrade(address newImplementation) internal override { }\\n}\\n\",\"keccak256\":\"0xad43c4cc3666b5e610b5de6ea1504fda5a0f141d6eca13ec418fb5430267c2f2\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405234603957600e6048565b6014603d565b61257a6100b58239608051818181611d5d01528181611dc90152611f6b015261257a90f35b6043565b60405190565b600080fd5b604e6050565b565b60566058565b565b605e6060565b565b60666068565b565b606e60a8565b565b60018060a01b031690565b90565b608d60896091926070565b607b565b6070565b90565b609b90607e565b90565b60a5906094565b90565b60af30609e565b60805256fe60806040526004361015610013575b610788565b61001e6000356100ad565b806301ffc9a7146100a85780634585e33b146100a3578063485cc9551461009e5780634f1ef2861461009957806352d1902d146100945780636e04ff0d1461008f57806385572ffb1461008a578063ad3cb1cc146100855763b0f479a10361000e57610753565b6106fb565b6105d5565b610550565b610491565b610431565b6102cc565b6101ff565b61013f565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b63ffffffff60e01b1690565b6100dd816100c8565b036100e457565b600080fd5b905035906100f6826100d4565b565b906020828203126101125761010f916000016100e9565b90565b6100be565b151590565b61012590610117565b9052565b919061013d9060006020850194019061011c565b565b3461016f5761016b61015a6101553660046100f8565b610792565b6101626100b3565b91829182610129565b0390f35b6100b9565b600080fd5b600080fd5b600080fd5b909182601f830112156101bd5781359167ffffffffffffffff83116101b85760200192600183028401116101b357565b61017e565b610179565b610174565b906020828203126101f457600082013567ffffffffffffffff81116101ef576101eb9201610183565b9091565b6100c3565b6100be565b60000190565b3461022e576102186102123660046101c2565b906111d9565b6102206100b3565b8061022a816101f9565b0390f35b6100b9565b60018060a01b031690565b61024790610233565b90565b6102538161023e565b0361025a57565b600080fd5b9050359061026c8261024a565b565b6102779061023e565b90565b6102838161026e565b0361028a57565b600080fd5b9050359061029c8261027a565b565b91906040838203126102c757806102bb6102c4926000860161025f565b9360200161028f565b90565b6100be565b346102fb576102e56102df36600461029e565b90611876565b6102ed6100b3565b806102f7816101f9565b0390f35b6100b9565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061032f90610305565b810190811067ffffffffffffffff82111761034957604052565b61030f565b9061036161035a6100b3565b9283610325565b565b67ffffffffffffffff81116103815761037d602091610305565b0190565b61030f565b90826000939282370152565b909291926103a76103a282610363565b61034e565b938185526020850190828401116103c3576103c192610386565b565b610300565b9080601f830112156103e6578160206103e393359101610392565b90565b610174565b91909160408184031261042c57610405836000830161025f565b92602082013567ffffffffffffffff81116104275761042492016103c8565b90565b6100c3565b6100be565b61044561043f3660046103eb565b906118a2565b61044d6100b3565b80610457816101f9565b0390f35b600091031261046657565b6100be565b90565b6104779061046b565b9052565b919061048f9060006020850194019061046e565b565b346104c1576104a136600461045b565b6104bd6104ac611919565b6104b46100b3565b9182918261047b565b0390f35b6100b9565b5190565b60209181520190565b60005b8381106104e7575050906000910152565b8060209183015181850152016104d6565b6105176105206020936105259361050e816104c6565b938480936104ca565b958691016104d3565b610305565b0190565b9161054d926105406040820193600083019061011c565b60208184039101526104f8565b90565b34610582576105696105633660046101c2565b9061192c565b9061057e6105756100b3565b92839283610529565b0390f35b6100b9565b600080fd5b908160a091031261059a5790565b610587565b906020828203126105d057600082013567ffffffffffffffff81116105cb576105c8920161058c565b90565b6100c3565b6100be565b34610603576105ed6105e836600461059f565b611c0c565b6105f56100b3565b806105ff816101f9565b0390f35b6100b9565b67ffffffffffffffff811161062657610622602091610305565b0190565b61030f565b9061063d61063883610608565b61034e565b918252565b60007f352e302e30000000000000000000000000000000000000000000000000000000910152565b610674600561062b565b9061068160208301610642565b565b61068b61066a565b90565b610696610683565b90565b6106a161068e565b90565b5190565b60209181520190565b6106d06106d96020936106de936106c7816106a4565b938480936106a8565b958691016104d3565b610305565b0190565b6106f891602082019160008184039101526106b1565b90565b3461072b5761070b36600461045b565b610727610716610699565b61071e6100b3565b918291826106e2565b0390f35b6100b9565b6107399061023e565b9052565b919061075190600060208501940190610730565b565b346107835761076336600461045b565b61077f61076e611c1c565b6107766100b3565b9182918261073d565b0390f35b6100b9565b600080fd5b600090565b61079a61078d565b50806107b56107af6385572ffb60e01b6100c8565b916100c8565b149081156107c2575b5090565b90506107dd6107d76301ffc9a760e01b6100c8565b916100c8565b14386107be565b5490565b90565b90565b90565b61080561080061080a926107eb565b6107ee565b6107e8565b90565b60007f4e756c6c50656e64696e67000000000000000000000000000000000000000000910152565b610842600b6020926106a8565b61084b8161080d565b0190565b6108659060208101906000818303910152610835565b90565b90565b61087f61087a61088492610868565b6107ee565b6107e8565b90565b634e487b7160e01b600052601160045260246000fd5b6108ac6108b2919392936107e8565b926107e8565b82039182116108bd57565b610887565b634e487b7160e01b600052603260045260246000fd5b600052602060002090565b6108ec816107e4565b821015610907576108fe6001916108d8565b91020190600090565b6108c2565b1c90565b90565b610923906008610928930261090c565b610910565b90565b906109369154610913565b90565b90565b634e487b7160e01b600052603160045260246000fd5b5490565b600052602060002090565b61096a81610952565b8210156109855761097c600191610956565b91020190600090565b6108c2565b1b90565b919060086109aa9102916109a46000198461098a565b9261098a565b9181191691161790565b6109bd9061046b565b90565b60001c90565b6109cf906109c0565b90565b91906109e86109e36109f0936109b4565b6109c6565b90835461098e565b9055565b600090565b610a0b91610a056109f4565b916109d2565b565b610a1681610952565b8015610a37576001900390610a34610a2e8383610961565b906109f9565b55565b61093c565b90610a46906109b4565b600052602052604060002090565b90565b60ff1690565b610a69610a6e916109c0565b610a57565b90565b610a7b9054610a5d565b90565b60007f6f72646572207472696564000000000000000000000000000000000000000000910152565b610ab3600b6020926106a8565b610abc81610a7e565b0190565b610ad69060208101906000818303910152610aa6565b90565b60001b90565b90610aeb60ff91610ad9565b9181191691161790565b610afe90610117565b90565b90565b90610b19610b14610b2092610af5565b610b01565b8254610adf565b9055565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610b5a575b6020831014610b5557565b610b24565b91607f1691610b4a565b60209181520190565b600052602060002090565b9060009291805490610b93610b8c83610b3a565b8094610b64565b91600181169081600014610bec5750600114610baf575b505050565b610bbc9192939450610b6d565b916000925b818410610bd45750500190388080610baa565b60018160209295939554848601520191019290610bc1565b92949550505060ff1916825215156020020190388080610baa565b90610c1191610b78565b90565b90610c34610c2d92610c246100b3565b93848092610c07565b0383610325565b565b610c3f90610c14565b90565b67ffffffffffffffff8111610c5a5760208091020190565b61030f565b90505190610c6c8261024a565b565b90929192610c83610c7e82610c42565b61034e565b9381855260208086019202830192818411610cc057915b838310610ca75750505050565b60208091610cb58486610c5f565b815201920191610c9a565b61017e565b9080601f83011215610ce357816020610ce093519101610c6e565b90565b610174565b610cf1816107e8565b03610cf857565b600080fd5b90505190610d0a82610ce8565b565b610d1590610233565b90565b610d2181610d0c565b03610d2857565b600080fd5b90505190610d3a82610d18565b565b608081830312610d9657600081015167ffffffffffffffff8111610d915782610d66918301610cc5565b92610d8e610d778460208501610cfd565b93610d858160408601610cfd565b93606001610d2d565b90565b6100c3565b6100be565b610daf610daa610db492610233565b6107ee565b610233565b90565b610dc090610d9b565b90565b610dcc90610db7565b90565b5190565b90610ddd82610dcf565b811015610dee576020809102010190565b6108c2565b610dfd905161023e565b90565b60018060a01b031690565b610e17610e1c916109c0565b610e00565b90565b610e299054610e0b565b90565b610e3590610db7565b90565b63ffffffff1690565b60e01b90565b610e5b610e56610e6092610e38565b610e41565b6100c8565b90565b610e72610e78919392936107e8565b926107e8565b8201809211610e8357565b610887565b610e91906107e8565b9052565b60209181520190565b60200190565b610ead9061023e565b9052565b90610ebe81602093610ea4565b0190565b60200190565b90610ee5610edf610ed884610dcf565b8093610e95565b92610e9e565b9060005b818110610ef65750505090565b909192610f0f610f096001928651610eb1565b94610ec2565b9101919091610ee9565b90610f57610f6291610f6996989795610f4a608096610f4060a08801946000890190610e88565b6020870190610e88565b8482036040860152610ec8565b966060830190610730565b0190610e88565b565b610f7490610d9b565b90565b610f8090610f6b565b90565b610f8c90610db7565b90565b610f9881610117565b03610f9f57565b600080fd5b90505190610fb182610f8f565b565b90602082820312610fcd57610fca91600001610fa4565b90565b6100be565b916020610ff4929493610fed60408201966000830190610730565b0190610e88565b565b610ffe6100b3565b3d6000823e3d90fd5b9061101961101483610363565b61034e565b918252565b606090565b3d600014611040576110343d611007565b903d6000602084013e5b565b61104861101e565b9061103e565b67ffffffffffffffff81116110665760208091020190565b61030f565b9092919261108061107b8261104e565b61034e565b93818552602080860192028301928184116110bd57915b8383106110a45750505050565b602080916110b28486610cfd565b815201920191611097565b61017e565b9080601f830112156110e0578160206110dd9351910161106b565b90565b610174565b9060208282031261111657600082015167ffffffffffffffff81116111115761110e92016110c2565b90565b6100c3565b6100be565b6111516111589461114760609498979561113d608086019a600087019061046e565b6020850190610730565b6040830190610e88565b0190610730565b565b5190565b906111688261115a565b811015611179576020809102010190565b6108c2565b61118890516107e8565b90565b909594926111d7946111c66111d0926111bc6080966111b260a088019c600089019061046e565b6020870190610730565b6040850190610e88565b6060830190610730565b0190610e88565b565b50506111e3611c3b565b6111ef600282016107e4565b6112026111fc60006107f1565b916107e8565b1461150a5761123c61123660028301611230611220600286016107e4565b61122a600161086b565b9061089d565b906108e3565b9061092b565b9061125161124c60028301610939565b610a0d565b611267611262600183018490610a3c565b610a54565b61127360018201610a71565b6114e857611361926112c3926112b361129d60006004956112976001808301610b04565b01610c36565b60206112a8826104c6565b818301019101610d3c565b9592979197969096979695610dc3565b6113526112e26112dd8a6112d760006107f1565b90610dd3565b610df3565b9661131161130c8b6113066112f682610dcf565b611300600161086b565b9061089d565b90610dd3565b610df3565b9961131f6338ed1739610e47565b938a9291909161133942611333600161086b565b90610e63565b936113426100b3565b9889976020890190815201610f19565b60208201810382520382610325565b9061137361136e85610f77565b610f83565b91602063095ea7b39361139061138b60008601610e1f565b610e2c565b906113af60008a976113ba6113a36100b3565b998a9687958694610e41565b845260048401610fd2565b03925af19182156114e3576113de60006113e392819682966114b7575b5001610e1f565b610e2c565b9082602082019151925af161140f6113f9611023565b6020611404826104c6565b8183010191016110e5565b906000146114745761143a61143561146e939495969261142f600161086b565b9061115e565b61117e565b907f822319dbb05b08c7cd35671754434068fd8759135b8f4da7b227f4b671102e50956114656100b3565b9586958661118b565b0390a15b565b506114af909192937f6962380f6ae5ec8ce3b354d6f544c0bc1c3813881d5a38aeaae1464ef746c1b2946114a66100b3565b9485948561111b565b0390a1611472565b6114d79060203d81116114dc575b6114cf8183610325565b810190610fb3565b6113d7565b503d6114c5565b610ff6565b6114f06100b3565b62461bcd60e51b81528061150660048201610ac0565b0390fd5b6115126100b3565b62461bcd60e51b8152806115286004820161084f565b0390fd5b60401c90565b61153e6115439161152c565b610a57565b90565b6115509054611532565b90565b67ffffffffffffffff1690565b61156c611571916109c0565b611553565b90565b61157e9054611560565b90565b67ffffffffffffffff1690565b6115a261159d6115a7926107eb565b6107ee565b611581565b90565b6115be6115b96115c392610868565b6107ee565b611581565b90565b6115cf90610db7565b90565b906115e567ffffffffffffffff91610ad9565b9181191691161790565b6116036115fe61160892611581565b6107ee565b611581565b90565b90565b9061162361161e61162a926115ef565b61160b565b82546115d2565b9055565b60401b90565b9061164868ff00000000000000009161162e565b9181191691161790565b9061166761166261166e92610af5565b610b01565b8254611634565b9055565b61167b906115aa565b9052565b919061169390600060208501940190611672565b565b9061169e611c5f565b916116b46116ae60008501611546565b15610117565b916116c160008501611574565b806116d56116cf600061158e565b91611581565b14806117fa575b906116f06116ea60016115aa565b91611581565b14806117d1575b611702909115610117565b90816117c0575b5061179d576117339161172861171f60016115aa565b6000870161160e565b8361178a575b611857565b61173b575b50565b611749906000809101611652565b60016117817fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916117786100b3565b9182918261167f565b0390a138611738565b611798600160008701611652565b61172e565b6117a56100b3565b63f92ee8a960e01b8152806117bc600482016101f9565b0390fd5b6117cb915015610117565b38611709565b506117026117de306115c6565b3b6117f26117ec60006107f1565b916107e8565b1490506116f7565b50836116dc565b9061181260018060a01b0391610ad9565b9181191691161790565b61182590610d9b565b90565b6118319061181c565b90565b90565b9061184c61184761185392611828565b611834565b8254611801565b9055565b9061186461187492611cda565b600061186e611c3b565b01611837565b565b9061188091611695565b565b906118949161188f611d4c565b611896565b565b906118a091611e4c565b565b906118ac91611882565b565b6118bf906118ba611f5a565b61190d565b90565b90565b6118d96118d46118de926118c2565b610ad9565b61046b565b90565b61190a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6118c5565b90565b506119166118e1565b90565b6119296119246109f4565b6118ae565b90565b505061193661078d565b5061193f61101e565b611952600261194c611c3b565b016107e4565b61196561195f60006107f1565b916107e8565b141591565b60018060a01b031690565b611981611986916109c0565b61196a565b90565b6119939054611975565b90565b336119bb6119b56119b060006119aa611fbf565b01611989565b61023e565b9161023e565b036119cb576119c990611bf9565b565b6119ed336119d76100b3565b9182916335fdcccd60e21b83526004830161073d565b0390fd5b600080fd5b600080fd5b611a048161046b565b03611a0b57565b600080fd5b90503590611a1d826119fb565b565b611a2881611581565b03611a2f57565b600080fd5b90503590611a4182611a1f565b565b67ffffffffffffffff8111611a5b5760208091020190565b61030f565b90503590611a6d82610ce8565b565b9190604083820312611aab57611aa490611a89604061034e565b93611a97826000830161025f565b6000860152602001611a60565b6020830152565b6119f1565b90929192611ac5611ac082611a43565b61034e565b938185526040602086019202830192818411611b0457915b838310611aea5750505050565b6020604091611af98486611a6f565b815201920191611add565b61017e565b9080601f83011215611b2757816020611b2493359101611ab0565b90565b610174565b91909160a081840312611be657611b4360a061034e565b92611b518160008401611a10565b6000850152611b638160208401611a34565b6020850152604082013567ffffffffffffffff8111611be15781611b889184016103c8565b6040850152606082013567ffffffffffffffff8111611bdc5781611bad9184016103c8565b6060850152608082013567ffffffffffffffff8111611bd757611bd09201611b09565b6080830152565b6119f6565b6119f6565b6119f6565b6119f1565b611bf6903690611b2c565b90565b611c05611c0a91611beb565b612275565b565b611c1590611996565b565b600090565b611c24611c17565b50611c386000611c32611fbf565b01611989565b90565b7f976509985809e047515ccc2c69ccb29a3b3da26dc470e8fda630ec865ee4e30090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611c97611c92611c9c926107eb565b6107ee565b610233565b90565b611ca890611c83565b90565b611cb490610db7565b90565b90565b90611ccf611cca611cd692611cab565b611cb7565b8254611801565b9055565b80611cf6611cf0611ceb6000611c9f565b61023e565b9161023e565b14611d1157611d0f906000611d09611fbf565b01611cba565b565b611d3c611d1e6000611c9f565b611d266100b3565b9182916335fdcccd60e21b83526004830161073d565b0390fd5b611d4990610db7565b90565b611d5530611d40565b611d87611d817f000000000000000000000000000000000000000000000000000000000000000061023e565b9161023e565b148015611db8575b611d9557565b611d9d6100b3565b63703e46dd60e11b815280611db4600482016101f9565b0390fd5b50611dc16122e6565b611df3611ded7f000000000000000000000000000000000000000000000000000000000000000061023e565b9161023e565b1415611d8f565b611e0390610d9b565b90565b611e0f90611dfa565b90565b611e1b90610db7565b90565b90505190611e2b826119fb565b565b90602082820312611e4757611e4491600001611e1e565b90565b6100be565b9190611e7a6020611e64611e5f86611e06565b611e12565b6352d1902d90611e726100b3565b938492610e41565b82528180611e8a600482016101f9565b03915afa8091600092611f2a575b5015600014611ed4575050906001611eae57505b565b611ed090611eba6100b3565b918291634c9c8ce360e01b83526004830161073d565b0390fd5b9283611eef611ee9611ee46118e1565b61046b565b9161046b565b03611f0457611eff92935061230d565b611eac565b611f2684611f106100b3565b918291632a87526960e21b83526004830161047b565b0390fd5b611f4c91925060203d8111611f53575b611f448183610325565b810190611e2d565b9038611e98565b503d611f3a565b611f6330611d40565b611f95611f8f7f000000000000000000000000000000000000000000000000000000000000000061023e565b9161023e565b03611f9c57565b611fa46100b3565b63703e46dd60e11b815280611fbb600482016101f9565b0390fd5b7fb9605d6807cee7e996cb505aab0fff682142fb832cd7587ec7f7258d8030000090565b611fed604061034e565b90565b52565b90611ffd90610117565b9052565b61200b905161046b565b90565b5190565b601f602091010490565b61203061202b612035926107e8565b6107ee565b6107e8565b90565b90565b919061205161204c6120599361201c565b612038565b90835461098e565b9055565b600090565b6120749161206e61205d565b9161203b565b565b5b818110612082575050565b806120906000600193612062565b01612077565b9190601f81116120a6575b505050565b6120b26120d793610b6d565b9060206120be84612012565b830193106120df575b6120d090612012565b0190612076565b3880806120a1565b91506120d0819290506120c7565b906120fe906000199060080261090c565b191690565b8161210d916120ed565b906002021790565b9061211f816104c6565b9067ffffffffffffffff82116121e1576121438261213d8554610b3a565b85612096565b602090601f8311600114612178579180916121679360009261216c575b5050612103565b90555b565b90915001513880612160565b601f1983169161218785610b6d565b9260005b8181106121c9575091600293918560019694106121af575b5050500201905561216a565b6121bf910151601f8416906120ed565b90553880806121a3565b9193602060018192878701518155019501920161218b565b61030f565b906121f091612115565b565b6121fc9051610117565b90565b9061222c60206001612232946122246000820161221e6000880161200e565b906121e6565b0192016121f2565b90610b04565b565b9061223e916121ff565b565b9081549168010000000000000000831015612270578261226891600161226e95018155610961565b906109d2565b565b61030f565b6122e4906122de60006122d7600261228b611c3b565b6122d160608701516122b4866122ab6122a2611fe3565b93898501611ff0565b60208301611ff3565b6122cc600184016122c6888b01612001565b90610a3c565b612234565b01610939565b9201612001565b90612240565b565b6122ee611c17565b5061230a60006123046122ff6118e1565b612398565b01611989565b90565b906123178261239b565b816123427fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b91611cab565b9061234b6100b3565b80612355816101f9565b0390a2612361816104c6565b61237461236e60006107f1565b916107e8565b116000146123895761238591612437565b505b565b50506123936123f9565b612387565b90565b803b6123b06123aa60006107f1565b916107e8565b146123d3576123d19060006123cb6123c66118e1565b612398565b01611cba565b565b6123f5906123df6100b3565b918291634c9c8ce360e01b83526004830161073d565b0390fd5b3461240d61240760006107f1565b916107e8565b1161241457565b61241c6100b3565b63b398979f60e01b815280612433600482016101f9565b0390fd5b6000806124649361244661101e565b508390602081019051915af49061245b611023565b90919091612467565b90565b9061247b9061247461101e565b5015610117565b60001461248857506124f5565b612491826104c6565b6124a461249e60006107f1565b916107e8565b14806124d9575b6124b3575090565b6124d5906124bf6100b3565b918291639996b31560e01b83526004830161073d565b0390fd5b50803b6124ef6124e960006107f1565b916107e8565b146124ab565b6124fe816104c6565b61251161250b60006107f1565b916107e8565b1160001461252157805190602001fd5b6125296100b3565b630a12f52160e11b815280612540600482016101f9565b0390fdfea26469706673582212204b020990de36e046a0ead11366fb00cd9933114aa43aa53fd1dd3c17a0e5b64c64736f6c63430008190033",
  "deployedBytecode": "0x60806040526004361015610013575b610788565b61001e6000356100ad565b806301ffc9a7146100a85780634585e33b146100a3578063485cc9551461009e5780634f1ef2861461009957806352d1902d146100945780636e04ff0d1461008f57806385572ffb1461008a578063ad3cb1cc146100855763b0f479a10361000e57610753565b6106fb565b6105d5565b610550565b610491565b610431565b6102cc565b6101ff565b61013f565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b63ffffffff60e01b1690565b6100dd816100c8565b036100e457565b600080fd5b905035906100f6826100d4565b565b906020828203126101125761010f916000016100e9565b90565b6100be565b151590565b61012590610117565b9052565b919061013d9060006020850194019061011c565b565b3461016f5761016b61015a6101553660046100f8565b610792565b6101626100b3565b91829182610129565b0390f35b6100b9565b600080fd5b600080fd5b600080fd5b909182601f830112156101bd5781359167ffffffffffffffff83116101b85760200192600183028401116101b357565b61017e565b610179565b610174565b906020828203126101f457600082013567ffffffffffffffff81116101ef576101eb9201610183565b9091565b6100c3565b6100be565b60000190565b3461022e576102186102123660046101c2565b906111d9565b6102206100b3565b8061022a816101f9565b0390f35b6100b9565b60018060a01b031690565b61024790610233565b90565b6102538161023e565b0361025a57565b600080fd5b9050359061026c8261024a565b565b6102779061023e565b90565b6102838161026e565b0361028a57565b600080fd5b9050359061029c8261027a565b565b91906040838203126102c757806102bb6102c4926000860161025f565b9360200161028f565b90565b6100be565b346102fb576102e56102df36600461029e565b90611876565b6102ed6100b3565b806102f7816101f9565b0390f35b6100b9565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061032f90610305565b810190811067ffffffffffffffff82111761034957604052565b61030f565b9061036161035a6100b3565b9283610325565b565b67ffffffffffffffff81116103815761037d602091610305565b0190565b61030f565b90826000939282370152565b909291926103a76103a282610363565b61034e565b938185526020850190828401116103c3576103c192610386565b565b610300565b9080601f830112156103e6578160206103e393359101610392565b90565b610174565b91909160408184031261042c57610405836000830161025f565b92602082013567ffffffffffffffff81116104275761042492016103c8565b90565b6100c3565b6100be565b61044561043f3660046103eb565b906118a2565b61044d6100b3565b80610457816101f9565b0390f35b600091031261046657565b6100be565b90565b6104779061046b565b9052565b919061048f9060006020850194019061046e565b565b346104c1576104a136600461045b565b6104bd6104ac611919565b6104b46100b3565b9182918261047b565b0390f35b6100b9565b5190565b60209181520190565b60005b8381106104e7575050906000910152565b8060209183015181850152016104d6565b6105176105206020936105259361050e816104c6565b938480936104ca565b958691016104d3565b610305565b0190565b9161054d926105406040820193600083019061011c565b60208184039101526104f8565b90565b34610582576105696105633660046101c2565b9061192c565b9061057e6105756100b3565b92839283610529565b0390f35b6100b9565b600080fd5b908160a091031261059a5790565b610587565b906020828203126105d057600082013567ffffffffffffffff81116105cb576105c8920161058c565b90565b6100c3565b6100be565b34610603576105ed6105e836600461059f565b611c0c565b6105f56100b3565b806105ff816101f9565b0390f35b6100b9565b67ffffffffffffffff811161062657610622602091610305565b0190565b61030f565b9061063d61063883610608565b61034e565b918252565b60007f352e302e30000000000000000000000000000000000000000000000000000000910152565b610674600561062b565b9061068160208301610642565b565b61068b61066a565b90565b610696610683565b90565b6106a161068e565b90565b5190565b60209181520190565b6106d06106d96020936106de936106c7816106a4565b938480936106a8565b958691016104d3565b610305565b0190565b6106f891602082019160008184039101526106b1565b90565b3461072b5761070b36600461045b565b610727610716610699565b61071e6100b3565b918291826106e2565b0390f35b6100b9565b6107399061023e565b9052565b919061075190600060208501940190610730565b565b346107835761076336600461045b565b61077f61076e611c1c565b6107766100b3565b9182918261073d565b0390f35b6100b9565b600080fd5b600090565b61079a61078d565b50806107b56107af6385572ffb60e01b6100c8565b916100c8565b149081156107c2575b5090565b90506107dd6107d76301ffc9a760e01b6100c8565b916100c8565b14386107be565b5490565b90565b90565b90565b61080561080061080a926107eb565b6107ee565b6107e8565b90565b60007f4e756c6c50656e64696e67000000000000000000000000000000000000000000910152565b610842600b6020926106a8565b61084b8161080d565b0190565b6108659060208101906000818303910152610835565b90565b90565b61087f61087a61088492610868565b6107ee565b6107e8565b90565b634e487b7160e01b600052601160045260246000fd5b6108ac6108b2919392936107e8565b926107e8565b82039182116108bd57565b610887565b634e487b7160e01b600052603260045260246000fd5b600052602060002090565b6108ec816107e4565b821015610907576108fe6001916108d8565b91020190600090565b6108c2565b1c90565b90565b610923906008610928930261090c565b610910565b90565b906109369154610913565b90565b90565b634e487b7160e01b600052603160045260246000fd5b5490565b600052602060002090565b61096a81610952565b8210156109855761097c600191610956565b91020190600090565b6108c2565b1b90565b919060086109aa9102916109a46000198461098a565b9261098a565b9181191691161790565b6109bd9061046b565b90565b60001c90565b6109cf906109c0565b90565b91906109e86109e36109f0936109b4565b6109c6565b90835461098e565b9055565b600090565b610a0b91610a056109f4565b916109d2565b565b610a1681610952565b8015610a37576001900390610a34610a2e8383610961565b906109f9565b55565b61093c565b90610a46906109b4565b600052602052604060002090565b90565b60ff1690565b610a69610a6e916109c0565b610a57565b90565b610a7b9054610a5d565b90565b60007f6f72646572207472696564000000000000000000000000000000000000000000910152565b610ab3600b6020926106a8565b610abc81610a7e565b0190565b610ad69060208101906000818303910152610aa6565b90565b60001b90565b90610aeb60ff91610ad9565b9181191691161790565b610afe90610117565b90565b90565b90610b19610b14610b2092610af5565b610b01565b8254610adf565b9055565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610b5a575b6020831014610b5557565b610b24565b91607f1691610b4a565b60209181520190565b600052602060002090565b9060009291805490610b93610b8c83610b3a565b8094610b64565b91600181169081600014610bec5750600114610baf575b505050565b610bbc9192939450610b6d565b916000925b818410610bd45750500190388080610baa565b60018160209295939554848601520191019290610bc1565b92949550505060ff1916825215156020020190388080610baa565b90610c1191610b78565b90565b90610c34610c2d92610c246100b3565b93848092610c07565b0383610325565b565b610c3f90610c14565b90565b67ffffffffffffffff8111610c5a5760208091020190565b61030f565b90505190610c6c8261024a565b565b90929192610c83610c7e82610c42565b61034e565b9381855260208086019202830192818411610cc057915b838310610ca75750505050565b60208091610cb58486610c5f565b815201920191610c9a565b61017e565b9080601f83011215610ce357816020610ce093519101610c6e565b90565b610174565b610cf1816107e8565b03610cf857565b600080fd5b90505190610d0a82610ce8565b565b610d1590610233565b90565b610d2181610d0c565b03610d2857565b600080fd5b90505190610d3a82610d18565b565b608081830312610d9657600081015167ffffffffffffffff8111610d915782610d66918301610cc5565b92610d8e610d778460208501610cfd565b93610d858160408601610cfd565b93606001610d2d565b90565b6100c3565b6100be565b610daf610daa610db492610233565b6107ee565b610233565b90565b610dc090610d9b565b90565b610dcc90610db7565b90565b5190565b90610ddd82610dcf565b811015610dee576020809102010190565b6108c2565b610dfd905161023e565b90565b60018060a01b031690565b610e17610e1c916109c0565b610e00565b90565b610e299054610e0b565b90565b610e3590610db7565b90565b63ffffffff1690565b60e01b90565b610e5b610e56610e6092610e38565b610e41565b6100c8565b90565b610e72610e78919392936107e8565b926107e8565b8201809211610e8357565b610887565b610e91906107e8565b9052565b60209181520190565b60200190565b610ead9061023e565b9052565b90610ebe81602093610ea4565b0190565b60200190565b90610ee5610edf610ed884610dcf565b8093610e95565b92610e9e565b9060005b818110610ef65750505090565b909192610f0f610f096001928651610eb1565b94610ec2565b9101919091610ee9565b90610f57610f6291610f6996989795610f4a608096610f4060a08801946000890190610e88565b6020870190610e88565b8482036040860152610ec8565b966060830190610730565b0190610e88565b565b610f7490610d9b565b90565b610f8090610f6b565b90565b610f8c90610db7565b90565b610f9881610117565b03610f9f57565b600080fd5b90505190610fb182610f8f565b565b90602082820312610fcd57610fca91600001610fa4565b90565b6100be565b916020610ff4929493610fed60408201966000830190610730565b0190610e88565b565b610ffe6100b3565b3d6000823e3d90fd5b9061101961101483610363565b61034e565b918252565b606090565b3d600014611040576110343d611007565b903d6000602084013e5b565b61104861101e565b9061103e565b67ffffffffffffffff81116110665760208091020190565b61030f565b9092919261108061107b8261104e565b61034e565b93818552602080860192028301928184116110bd57915b8383106110a45750505050565b602080916110b28486610cfd565b815201920191611097565b61017e565b9080601f830112156110e0578160206110dd9351910161106b565b90565b610174565b9060208282031261111657600082015167ffffffffffffffff81116111115761110e92016110c2565b90565b6100c3565b6100be565b6111516111589461114760609498979561113d608086019a600087019061046e565b6020850190610730565b6040830190610e88565b0190610730565b565b5190565b906111688261115a565b811015611179576020809102010190565b6108c2565b61118890516107e8565b90565b909594926111d7946111c66111d0926111bc6080966111b260a088019c600089019061046e565b6020870190610730565b6040850190610e88565b6060830190610730565b0190610e88565b565b50506111e3611c3b565b6111ef600282016107e4565b6112026111fc60006107f1565b916107e8565b1461150a5761123c61123660028301611230611220600286016107e4565b61122a600161086b565b9061089d565b906108e3565b9061092b565b9061125161124c60028301610939565b610a0d565b611267611262600183018490610a3c565b610a54565b61127360018201610a71565b6114e857611361926112c3926112b361129d60006004956112976001808301610b04565b01610c36565b60206112a8826104c6565b818301019101610d3c565b9592979197969096979695610dc3565b6113526112e26112dd8a6112d760006107f1565b90610dd3565b610df3565b9661131161130c8b6113066112f682610dcf565b611300600161086b565b9061089d565b90610dd3565b610df3565b9961131f6338ed1739610e47565b938a9291909161133942611333600161086b565b90610e63565b936113426100b3565b9889976020890190815201610f19565b60208201810382520382610325565b9061137361136e85610f77565b610f83565b91602063095ea7b39361139061138b60008601610e1f565b610e2c565b906113af60008a976113ba6113a36100b3565b998a9687958694610e41565b845260048401610fd2565b03925af19182156114e3576113de60006113e392819682966114b7575b5001610e1f565b610e2c565b9082602082019151925af161140f6113f9611023565b6020611404826104c6565b8183010191016110e5565b906000146114745761143a61143561146e939495969261142f600161086b565b9061115e565b61117e565b907f822319dbb05b08c7cd35671754434068fd8759135b8f4da7b227f4b671102e50956114656100b3565b9586958661118b565b0390a15b565b506114af909192937f6962380f6ae5ec8ce3b354d6f544c0bc1c3813881d5a38aeaae1464ef746c1b2946114a66100b3565b9485948561111b565b0390a1611472565b6114d79060203d81116114dc575b6114cf8183610325565b810190610fb3565b6113d7565b503d6114c5565b610ff6565b6114f06100b3565b62461bcd60e51b81528061150660048201610ac0565b0390fd5b6115126100b3565b62461bcd60e51b8152806115286004820161084f565b0390fd5b60401c90565b61153e6115439161152c565b610a57565b90565b6115509054611532565b90565b67ffffffffffffffff1690565b61156c611571916109c0565b611553565b90565b61157e9054611560565b90565b67ffffffffffffffff1690565b6115a261159d6115a7926107eb565b6107ee565b611581565b90565b6115be6115b96115c392610868565b6107ee565b611581565b90565b6115cf90610db7565b90565b906115e567ffffffffffffffff91610ad9565b9181191691161790565b6116036115fe61160892611581565b6107ee565b611581565b90565b90565b9061162361161e61162a926115ef565b61160b565b82546115d2565b9055565b60401b90565b9061164868ff00000000000000009161162e565b9181191691161790565b9061166761166261166e92610af5565b610b01565b8254611634565b9055565b61167b906115aa565b9052565b919061169390600060208501940190611672565b565b9061169e611c5f565b916116b46116ae60008501611546565b15610117565b916116c160008501611574565b806116d56116cf600061158e565b91611581565b14806117fa575b906116f06116ea60016115aa565b91611581565b14806117d1575b611702909115610117565b90816117c0575b5061179d576117339161172861171f60016115aa565b6000870161160e565b8361178a575b611857565b61173b575b50565b611749906000809101611652565b60016117817fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2916117786100b3565b9182918261167f565b0390a138611738565b611798600160008701611652565b61172e565b6117a56100b3565b63f92ee8a960e01b8152806117bc600482016101f9565b0390fd5b6117cb915015610117565b38611709565b506117026117de306115c6565b3b6117f26117ec60006107f1565b916107e8565b1490506116f7565b50836116dc565b9061181260018060a01b0391610ad9565b9181191691161790565b61182590610d9b565b90565b6118319061181c565b90565b90565b9061184c61184761185392611828565b611834565b8254611801565b9055565b9061186461187492611cda565b600061186e611c3b565b01611837565b565b9061188091611695565b565b906118949161188f611d4c565b611896565b565b906118a091611e4c565b565b906118ac91611882565b565b6118bf906118ba611f5a565b61190d565b90565b90565b6118d96118d46118de926118c2565b610ad9565b61046b565b90565b61190a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6118c5565b90565b506119166118e1565b90565b6119296119246109f4565b6118ae565b90565b505061193661078d565b5061193f61101e565b611952600261194c611c3b565b016107e4565b61196561195f60006107f1565b916107e8565b141591565b60018060a01b031690565b611981611986916109c0565b61196a565b90565b6119939054611975565b90565b336119bb6119b56119b060006119aa611fbf565b01611989565b61023e565b9161023e565b036119cb576119c990611bf9565b565b6119ed336119d76100b3565b9182916335fdcccd60e21b83526004830161073d565b0390fd5b600080fd5b600080fd5b611a048161046b565b03611a0b57565b600080fd5b90503590611a1d826119fb565b565b611a2881611581565b03611a2f57565b600080fd5b90503590611a4182611a1f565b565b67ffffffffffffffff8111611a5b5760208091020190565b61030f565b90503590611a6d82610ce8565b565b9190604083820312611aab57611aa490611a89604061034e565b93611a97826000830161025f565b6000860152602001611a60565b6020830152565b6119f1565b90929192611ac5611ac082611a43565b61034e565b938185526040602086019202830192818411611b0457915b838310611aea5750505050565b6020604091611af98486611a6f565b815201920191611add565b61017e565b9080601f83011215611b2757816020611b2493359101611ab0565b90565b610174565b91909160a081840312611be657611b4360a061034e565b92611b518160008401611a10565b6000850152611b638160208401611a34565b6020850152604082013567ffffffffffffffff8111611be15781611b889184016103c8565b6040850152606082013567ffffffffffffffff8111611bdc5781611bad9184016103c8565b6060850152608082013567ffffffffffffffff8111611bd757611bd09201611b09565b6080830152565b6119f6565b6119f6565b6119f6565b6119f1565b611bf6903690611b2c565b90565b611c05611c0a91611beb565b612275565b565b611c1590611996565b565b600090565b611c24611c17565b50611c386000611c32611fbf565b01611989565b90565b7f976509985809e047515ccc2c69ccb29a3b3da26dc470e8fda630ec865ee4e30090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611c97611c92611c9c926107eb565b6107ee565b610233565b90565b611ca890611c83565b90565b611cb490610db7565b90565b90565b90611ccf611cca611cd692611cab565b611cb7565b8254611801565b9055565b80611cf6611cf0611ceb6000611c9f565b61023e565b9161023e565b14611d1157611d0f906000611d09611fbf565b01611cba565b565b611d3c611d1e6000611c9f565b611d266100b3565b9182916335fdcccd60e21b83526004830161073d565b0390fd5b611d4990610db7565b90565b611d5530611d40565b611d87611d817f000000000000000000000000000000000000000000000000000000000000000061023e565b9161023e565b148015611db8575b611d9557565b611d9d6100b3565b63703e46dd60e11b815280611db4600482016101f9565b0390fd5b50611dc16122e6565b611df3611ded7f000000000000000000000000000000000000000000000000000000000000000061023e565b9161023e565b1415611d8f565b611e0390610d9b565b90565b611e0f90611dfa565b90565b611e1b90610db7565b90565b90505190611e2b826119fb565b565b90602082820312611e4757611e4491600001611e1e565b90565b6100be565b9190611e7a6020611e64611e5f86611e06565b611e12565b6352d1902d90611e726100b3565b938492610e41565b82528180611e8a600482016101f9565b03915afa8091600092611f2a575b5015600014611ed4575050906001611eae57505b565b611ed090611eba6100b3565b918291634c9c8ce360e01b83526004830161073d565b0390fd5b9283611eef611ee9611ee46118e1565b61046b565b9161046b565b03611f0457611eff92935061230d565b611eac565b611f2684611f106100b3565b918291632a87526960e21b83526004830161047b565b0390fd5b611f4c91925060203d8111611f53575b611f448183610325565b810190611e2d565b9038611e98565b503d611f3a565b611f6330611d40565b611f95611f8f7f000000000000000000000000000000000000000000000000000000000000000061023e565b9161023e565b03611f9c57565b611fa46100b3565b63703e46dd60e11b815280611fbb600482016101f9565b0390fd5b7fb9605d6807cee7e996cb505aab0fff682142fb832cd7587ec7f7258d8030000090565b611fed604061034e565b90565b52565b90611ffd90610117565b9052565b61200b905161046b565b90565b5190565b601f602091010490565b61203061202b612035926107e8565b6107ee565b6107e8565b90565b90565b919061205161204c6120599361201c565b612038565b90835461098e565b9055565b600090565b6120749161206e61205d565b9161203b565b565b5b818110612082575050565b806120906000600193612062565b01612077565b9190601f81116120a6575b505050565b6120b26120d793610b6d565b9060206120be84612012565b830193106120df575b6120d090612012565b0190612076565b3880806120a1565b91506120d0819290506120c7565b906120fe906000199060080261090c565b191690565b8161210d916120ed565b906002021790565b9061211f816104c6565b9067ffffffffffffffff82116121e1576121438261213d8554610b3a565b85612096565b602090601f8311600114612178579180916121679360009261216c575b5050612103565b90555b565b90915001513880612160565b601f1983169161218785610b6d565b9260005b8181106121c9575091600293918560019694106121af575b5050500201905561216a565b6121bf910151601f8416906120ed565b90553880806121a3565b9193602060018192878701518155019501920161218b565b61030f565b906121f091612115565b565b6121fc9051610117565b90565b9061222c60206001612232946122246000820161221e6000880161200e565b906121e6565b0192016121f2565b90610b04565b565b9061223e916121ff565b565b9081549168010000000000000000831015612270578261226891600161226e95018155610961565b906109d2565b565b61030f565b6122e4906122de60006122d7600261228b611c3b565b6122d160608701516122b4866122ab6122a2611fe3565b93898501611ff0565b60208301611ff3565b6122cc600184016122c6888b01612001565b90610a3c565b612234565b01610939565b9201612001565b90612240565b565b6122ee611c17565b5061230a60006123046122ff6118e1565b612398565b01611989565b90565b906123178261239b565b816123427fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b91611cab565b9061234b6100b3565b80612355816101f9565b0390a2612361816104c6565b61237461236e60006107f1565b916107e8565b116000146123895761238591612437565b505b565b50506123936123f9565b612387565b90565b803b6123b06123aa60006107f1565b916107e8565b146123d3576123d19060006123cb6123c66118e1565b612398565b01611cba565b565b6123f5906123df6100b3565b918291634c9c8ce360e01b83526004830161073d565b0390fd5b3461240d61240760006107f1565b916107e8565b1161241457565b61241c6100b3565b63b398979f60e01b815280612433600482016101f9565b0390fd5b6000806124649361244661101e565b508390602081019051915af49061245b611023565b90919091612467565b90565b9061247b9061247461101e565b5015610117565b60001461248857506124f5565b612491826104c6565b6124a461249e60006107f1565b916107e8565b14806124d9575b6124b3575090565b6124d5906124bf6100b3565b918291639996b31560e01b83526004830161073d565b0390fd5b50803b6124ef6124e960006107f1565b916107e8565b146124ab565b6124fe816104c6565b61251161250b60006107f1565b916107e8565b1160001461252157805190602001fd5b6125296100b3565b630a12f52160e11b815280612540600482016101f9565b0390fdfea26469706673582212204b020990de36e046a0ead11366fb00cd9933114aa43aa53fd1dd3c17a0e5b64c64736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "details": "Note ensure you check the msg.sender is the OffRampRouter",
        "params": {
          "message": "CCIP Message"
        }
      },
      "getRouter()": {
        "returns": {
          "_0": "CCIP router address"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "supportsInterface(bytes4)": {
        "details": "Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.",
        "params": {
          "interfaceId": "The interfaceId to check"
        },
        "returns": {
          "_0": "true if the interfaceId is supported"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "notice": "Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."
      },
      "getRouter()": {
        "notice": "Return the current router"
      },
      "supportsInterface(bytes4)": {
        "notice": "IERC165 supports an interfaceId"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}