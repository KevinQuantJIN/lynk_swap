{
  "address": "0x4a0b9a235C84bC5FeeE26772919e382fa25d1d28",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "DestinationChainNotAllowlisted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "FailedToWithdrawEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReceiverAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calculatedFees",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageIdA",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageIdB",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageIdC",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "InvokeSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "TokensTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRouterClient",
          "name": "router_",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "chainASelector_",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "chainBSelector_",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "chainCSelector_",
          "type": "uint64"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "LynkMessager",
          "type": "address"
        }
      ],
      "name": "setChainMessager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "originToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        }
      ],
      "name": "setTokenMap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minC",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x057414e196fd0370987f2867d36782257cafda4c6a2a8f1e69cee5eb32febdcd",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xba45b3d7A42c3554fa98bDC3F790da2676Cb0560",
    "contractAddress": null,
    "transactionIndex": 45,
    "gasUsed": "1875608",
    "logsBloom": "0x
    "blockHash": "0x002154c22d740c3dad57b7013fc1dc117be41b55a3845653a212ee1bfe54b72e",
    "transactionHash": "0x057414e196fd0370987f2867d36782257cafda4c6a2a8f1e69cee5eb32febdcd",
    "logs": [],
    "blockNumber": 6026294,
    "cumulativeGasUsed": "18295809",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "fc695c87e9dae91733aca0de617eabdd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"DestinationChainNotAllowlisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedToWithdrawEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceiverAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedFees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageIdA\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageIdB\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageIdC\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"InvokeSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRouterClient\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"chainASelector_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"chainBSelector_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"chainCSelector_\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"LynkMessager\",\"type\":\"address\"}],\"name\":\"setChainMessager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"}],\"name\":\"setTokenMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minC\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"swap(address,address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"a for amoy, b for base sepolia, c for fuji\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/LynkSwapRouter.sol\":\"LynkSwapRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"src/LynkSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.25;\\n\\nimport { Client } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport { IERC20 } from\\n    \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { IRouterClient } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\n\\ncontract LynkSwapRouter is UUPSUpgradeable {\\n    struct LynkSwapRouterStorage {\\n        IRouterClient router;\\n        uint64 chainASelector;\\n        uint64 chainBSelector;\\n        uint64 chainCSelector;\\n        mapping(uint64 => address) messagers;\\n        mapping(uint256 => mapping(address => address)) tokenMaps;\\n    }\\n\\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees); // Used to make sure contract has enough\\n        // balance to cover the fees.\\n    error NothingToWithdraw(); // Used when trying to withdraw Ether but there's nothing to withdraw.\\n    error FailedToWithdrawEth(address owner, address target, uint256 value); // Used when the withdrawal of Ether fails.\\n    error DestinationChainNotAllowlisted(uint64 destinationChainSelector); // Used when the destination chain has not\\n        // been allowlisted by the contract owner.\\n    error InvalidReceiverAddress(); // Used when the receiver address is 0.\\n\\n    // Event emitted when the tokens are transferred to an account on another chain.\\n    // The chain selector of the destination chain.\\n    // The address of the receiver on the destination chain.\\n    // The token address that was transferred.\\n    // The token amount that was transferred.\\n    // the token address used to pay CCIP fees.\\n    // The fees paid for sending the message.\\n    // The unique ID of the message.\\n    event TokensTransferred(\\n        bytes32 indexed messageId,\\n        uint64 indexed destinationChainSelector,\\n        address receiver,\\n        address token,\\n        uint256 tokenAmount,\\n        address feeToken,\\n        uint256 fees\\n    );\\n\\n    event InvokeSwap(\\n        bytes32 indexed messageIdA,\\n        bytes32 indexed messageIdB,\\n        bytes32 indexed messageIdC,\\n        address fromToken,\\n        uint256 fromAmount,\\n        uint256 feeAmount\\n    );\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"lynkswap.storage.router\\\")) - 1)) & ~ bytes32(uint256(0xff))\\n    //\\n    bytes32 private constant LynkSwapRouterStorageLocation =\\n        0x42631c0a284ed7d4e8004e5fc9bdf44dbbde6ac8d81ad52470bb1ab538a9aa00;\\n\\n    function initialize(\\n        IRouterClient router_,\\n        uint64 chainASelector_,\\n        uint64 chainBSelector_,\\n        uint64 chainCSelector_\\n    )\\n        external\\n        initializer\\n    {\\n        LynkSwapRouterStorage storage $ = _getLynkSwapRouterStorage();\\n        $.router = router_;\\n        $.chainASelector = chainASelector_;\\n        $.chainBSelector = chainBSelector_;\\n        $.chainCSelector = chainCSelector_;\\n    }\\n\\n    /**\\n     * @dev a for amoy, b for base sepolia, c for fuji\\n     */\\n    function swap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountA,\\n        uint256 minA,\\n        uint256 amountB,\\n        uint256 minB,\\n        uint256 amountC,\\n        uint256 minC\\n    )\\n        external\\n    {\\n        LynkSwapRouterStorage storage $ = _getLynkSwapRouterStorage();\\n\\n        uint256 totalInAmount = amountA + amountB + amountC;\\n\\n        // transfer in token from user to contracts\\n        IERC20(tokenIn).transferFrom(msg.sender, address(this), totalInAmount);\\n\\n        (uint256 feeA, bytes32 messageIdA) = _swapOnSingleChain($.chainASelector, tokenIn, tokenOut, amountA, minA);\\n        (uint256 feeB, bytes32 messageIdB) = _swapOnSingleChain($.chainBSelector, tokenIn, tokenOut, amountB, minB);\\n        (uint256 feeC, bytes32 messageIdC) = _swapOnSingleChain($.chainCSelector, tokenIn, tokenOut, amountC, minC);\\n\\n        uint256 totalFee = feeA + feeB + feeC;\\n\\n        emit InvokeSwap(messageIdA, messageIdB, messageIdC, tokenIn, totalInAmount, totalFee);\\n    }\\n\\n    function setChainMessager(uint64 chainSelector, address LynkMessager) public {\\n        LynkSwapRouterStorage storage $ = _getLynkSwapRouterStorage();\\n\\n        $.messagers[chainSelector] = LynkMessager;\\n    }\\n\\n    function setTokenMap(uint64 chainSelector, address originToken, address destToken) public {\\n        LynkSwapRouterStorage storage $ = _getLynkSwapRouterStorage();\\n\\n        $.tokenMaps[chainSelector][originToken] = destToken;\\n    }\\n\\n    function _swapOnSingleChain(\\n        uint64 chainSelector,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 minOut\\n    )\\n        internal\\n        returns (uint256 fees, bytes32 messageId)\\n    {\\n        LynkSwapRouterStorage storage $ = _getLynkSwapRouterStorage();\\n\\n        address messager = $.messagers[chainSelector];\\n\\n        address[] memory paths = new address[](2);\\n        paths[0] = $.tokenMaps[chainSelector][inToken];\\n        paths[1] = $.tokenMaps[chainSelector][outToken];\\n\\n        bytes memory swapData = abi.encode(paths, inAmount, minOut, msg.sender);\\n\\n        Client.EVM2AnyMessage memory evm2AnyMessage =\\n            _buildCCIPMessage(messager, inToken, inAmount, address(0), swapData);\\n\\n        // Get the fee required to send the message\\n        fees = $.router.getFee(chainSelector, evm2AnyMessage);\\n\\n        if (fees > address(this).balance) {\\n            revert NotEnoughBalance(address(this).balance, fees);\\n        }\\n\\n        // approve the Router to spend tokens on contract's behalf. It will spend the amount of the given token\\n        IERC20(inToken).approve(address($.router), inAmount);\\n\\n        // Send the message through the router and store the returned message ID\\n        messageId = $.router.ccipSend{ value: fees }(chainSelector, evm2AnyMessage);\\n\\n        // Emit an event with message details\\n        emit TokensTransferred(messageId, chainSelector, messager, inToken, inAmount, address(0), fees);\\n    }\\n\\n    /// @notice Construct a CCIP message.\\n    /// @dev This function will create an EVM2AnyMessage struct with all the necessary information for tokens transfer.\\n    /// @param _receiver The address of the receiver.\\n    /// @param _token The token to be transferred.\\n    /// @param _amount The amount of the token to be transferred.\\n    /// @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.\\n    /// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP\\n    /// message.\\n    function _buildCCIPMessage(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        address _feeTokenAddress,\\n        bytes memory data\\n    )\\n        private\\n        pure\\n        returns (Client.EVM2AnyMessage memory)\\n    {\\n        // Set the token amounts\\n        Client.EVMTokenAmount[] memory tokenAmounts = new Client.EVMTokenAmount[](1);\\n        tokenAmounts[0] = Client.EVMTokenAmount({ token: _token, amount: _amount });\\n\\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n        return Client.EVM2AnyMessage({\\n            receiver: abi.encode(_receiver), // ABI-encoded receiver address\\n            data: data,\\n            tokenAmounts: tokenAmounts, // The amount and type of token being transferred\\n            extraArgs: Client._argsToBytes(\\n                // set gas limit to max\\n                Client.EVMExtraArgsV1({ gasLimit: 3_000_000 })\\n                ),\\n            // Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\\n            feeToken: _feeTokenAddress\\n        });\\n    }\\n\\n    function _getLynkSwapRouterStorage() internal pure returns (LynkSwapRouterStorage storage $) {\\n        assembly {\\n            $.slot := LynkSwapRouterStorageLocation\\n        }\\n    }\\n\\n    // don't add auth for test\\n    function _authorizeUpgrade(address newImplementation) internal override { }\\n\\n    receive() external payable { }\\n}\\n\",\"keccak256\":\"0x62bc86a3c24099dfefad205fb8662ca510831526abe92bb47d01350f6debd573\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405234603957600e6048565b6014603d565b6120e061009582396080518181816118300152818161189c0152611a2601526120e090f35b6043565b60405190565b600080fd5b604e6088565b565b60018060a01b031690565b90565b606d60696071926050565b605b565b6050565b90565b607b90605e565b90565b6085906074565b90565b608f30607e565b60805256fe60806040526004361015610015575b3661069957005b61002060003561008f565b8063293618f41461008a5780632b81cb8e146100855780634f1ef2861461008057806352d1902d1461007b578063ad3cb1cc14610076578063cca2c1c8146100715763df3d33050361000e57610662565b6105b7565b610554565b610407565b6103a7565b610234565b610157565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b67ffffffffffffffff1690565b6100c0816100aa565b036100c757565b600080fd5b905035906100d9826100b7565b565b60018060a01b031690565b6100ef906100db565b90565b6100fb816100e6565b0361010257565b600080fd5b90503590610114826100f2565b565b909160608284031261014c5761014961013284600085016100cc565b936101408160208601610107565b93604001610107565b90565b6100a0565b60000190565b346101865761017061016a366004610116565b91610765565b610178610095565b8061018281610151565b0390f35b61009b565b90565b6101978161018b565b0361019e57565b600080fd5b905035906101b08261018e565b565b91906101008382031261022f576101cc8160008501610107565b926101da8260208301610107565b926101e883604084016101a3565b926101f681606085016101a3565b9261020482608083016101a3565b9261022c6102158460a085016101a3565b936102238160c086016101a3565b9360e0016101a3565b90565b6100a0565b3461026c576102566102473660046101b2565b96959095949194939293610965565b61025e610095565b8061026881610151565b0390f35b61009b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906102a59061027b565b810190811067ffffffffffffffff8211176102bf57604052565b610285565b906102d76102d0610095565b928361029b565b565b67ffffffffffffffff81116102f7576102f360209161027b565b0190565b610285565b90826000939282370152565b9092919261031d610318826102d9565b6102c4565b9381855260208501908284011161033957610337926102fc565b565b610276565b9080601f8301121561035c5781602061035993359101610308565b90565b610271565b9190916040818403126103a25761037b8360008301610107565b92602082013567ffffffffffffffff811161039d5761039a920161033e565b90565b6100a5565b6100a0565b6103bb6103b5366004610361565b90610b0e565b6103c3610095565b806103cd81610151565b0390f35b60009103126103dc57565b6100a0565b90565b6103ed906103e1565b9052565b9190610405906000602085019401906103e4565b565b34610437576104173660046103d1565b610433610422610b8a565b61042a610095565b918291826103f1565b0390f35b61009b565b67ffffffffffffffff811161045a5761045660209161027b565b0190565b610285565b9061047161046c8361043c565b6102c4565b918252565b60007f352e302e30000000000000000000000000000000000000000000000000000000910152565b6104a8600561045f565b906104b560208301610476565b565b6104bf61049e565b90565b6104ca6104b7565b90565b6104d56104c2565b90565b5190565b60209181520190565b60005b8381106104f9575050906000910152565b8060209183015181850152016104e8565b61052961053260209361053793610520816104d8565b938480936104dc565b958691016104e5565b61027b565b0190565b610551916020820191600081840391015261050a565b90565b34610584576105643660046103d1565b61058061056f6104cd565b610577610095565b9182918261053b565b0390f35b61009b565b91906040838203126105b257806105a66105af92600086016100cc565b93602001610107565b90565b6100a0565b346105e6576105d06105ca366004610589565b90610bd1565b6105d8610095565b806105e281610151565b0390f35b61009b565b6105f4906100e6565b90565b610600816105eb565b0361060757565b600080fd5b90503590610619826105f7565b565b60808183031261065d57610632826000830161060c565b9261065a61064384602085016100cc565b9361065181604086016100cc565b936060016100cc565b90565b6100a0565b346106945761067e61067536600461061b565b92919091610fa5565b610686610095565b8061069081610151565b0390f35b61009b565b600080fd5b90565b6106b56106b06106ba926100aa565b61069e565b61018b565b90565b906106c7906106a1565b600052602052604060002090565b6106e96106e46106ee926100db565b61069e565b6100db565b90565b6106fa906106d5565b90565b610706906106f1565b90565b90610713906106fd565b600052602052604060002090565b60001b90565b9061073860018060a01b0391610721565b9181191691161790565b90565b9061075a610755610761926106fd565b610742565b8254610727565b9055565b61078b929161078161078692600361077b610fb3565b016106bd565b610709565b610745565b565b634e487b7160e01b600052601160045260246000fd5b6107b26107b89193929361018b565b9261018b565b82018092116107c357565b61078d565b6107d1906106d5565b90565b6107dd906107c8565b90565b6107e9906106f1565b90565b6107f5906106f1565b90565b60e01b90565b151590565b61080c816107fe565b0361081357565b600080fd5b9050519061082582610803565b565b906020828203126108415761083e91600001610818565b90565b6100a0565b61084f906100e6565b9052565b61085c9061018b565b9052565b60409061088a610891949695939661088060608401986000850190610846565b6020830190610846565b0190610853565b565b61089b610095565b3d6000823e3d90fd5b60a01c90565b67ffffffffffffffff1690565b6108c36108c8916108a4565b6108aa565b90565b6108d590546108b7565b90565b60001c90565b6108ea6108ef916108d8565b6108aa565b90565b6108fc90546108de565b90565b60401c90565b610911610916916108ff565b6108aa565b90565b6109239054610905565b90565b61092f906103e1565b90565b60409061095c610963949695939661095260608401986000850190610846565b6020830190610853565b0190610853565b565b9590969196939293610975610fb3565b9461098b6109848a87906107a3565b84906107a3565b988960206109a061099b8c6107d4565b6107e0565b6323b872dd906109ce600033936109d96109b9306107ec565b976109c2610095565b988997889687956107f8565b855260048501610860565b03925af18015610ae957610abd575b50866000016109f6906108cb565b91899184909192610a06946114a9565b9690969486600101610a17906108f2565b91899184909192610a27946114a9565b93909395600101610a3790610919565b928892909192610a46946114a9565b9190919490610a54916107a3565b90610a5e916107a3565b90919293947f8f131ca39c983032bca048bd1763cf6b98c596965441607258bd290db5ff35af92610a8e90610926565b93610a9890610926565b94610aa290610926565b95610aab610095565b928392610ab89284610932565b0390a4565b610add9060203d8111610ae2575b610ad5818361029b565b810190610827565b6109e8565b503d610acb565b610893565b90610b0091610afb61181f565b610b02565b565b90610b0c91611907565b565b90610b1891610aee565b565b600090565b610b3090610b2b611a15565b610b7e565b90565b90565b610b4a610b45610b4f92610b33565b610721565b6103e1565b90565b610b7b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610b36565b90565b50610b87610b52565b90565b610b9a610b95610b1a565b610b1f565b90565b610bb1610bac610bb6926100aa565b61069e565b6100aa565b90565b90610bc390610b9d565b600052602052604060002090565b90610be9610bee926002610be3610fb3565b01610bb9565b610745565b565b60ff1690565b610c02610c07916108ff565b610bf0565b90565b610c149054610bf6565b90565b90565b610c2e610c29610c3392610c17565b61069e565b6100aa565b90565b90565b610c4d610c48610c5292610c36565b61069e565b6100aa565b90565b610c5e906106f1565b90565b610c75610c70610c7a92610c17565b61069e565b61018b565b90565b90610c9067ffffffffffffffff91610721565b9181191691161790565b90565b90610cb2610cad610cb992610b9d565b610c9a565b8254610c7d565b9055565b60401b90565b90610cd768ff000000000000000091610cbd565b9181191691161790565b610cea906107fe565b90565b90565b90610d05610d00610d0c92610ce1565b610ced565b8254610cc3565b9055565b610d1990610c39565b9052565b9190610d3190600060208501940190610d10565b565b909192610d3e611a7a565b93610d54610d4e60008701610c0a565b156107fe565b93610d61600087016108f2565b80610d75610d6f6000610c1a565b916100aa565b1480610e9a575b90610d90610d8a6001610c39565b916100aa565b1480610e71575b610da29091156107fe565b9081610e60575b50610e3d57610dd393610dc8610dbf6001610c39565b60008901610c9d565b85610e2a575b610f67565b610ddb575b50565b610de9906000809101610cf0565b6001610e217fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291610e18610095565b91829182610d1d565b0390a138610dd8565b610e38600160008901610cf0565b610dce565b610e45610095565b63f92ee8a960e01b815280610e5c60048201610151565b0390fd5b610e6b9150156107fe565b38610da9565b50610da2610e7e30610c55565b3b610e92610e8c6000610c61565b9161018b565b149050610d97565b5085610d7c565b610eaa906106d5565b90565b610eb690610ea1565b90565b90565b90610ed1610ecc610ed892610ead565b610eb9565b8254610727565b9055565b60a01b90565b90610ef867ffffffffffffffff60a01b91610edc565b9181191691161790565b90610f17610f12610f1e92610b9d565b610c9a565b8254610ee2565b9055565b90610f3d6fffffffffffffffff000000000000000091610cbd565b9181191691161790565b90610f5c610f57610f6392610b9d565b610c9a565b8254610f22565b9055565b9192610f9c610fa394610f94600194610f8b610f81610fb3565b9760008901610ebc565b60008701610f02565b838501610c9d565b9101610f47565b565b90610fb1939291610d33565b565b7f42631c0a284ed7d4e8004e5fc9bdf44dbbde6ac8d81ad52470bb1ab538a9aa0090565b600090565b60018060a01b031690565b610ff3610ff8916108d8565b610fdc565b90565b6110059054610fe7565b90565b90565b61101f61101a61102492611008565b61069e565b61018b565b90565b67ffffffffffffffff811161103f5760208091020190565b610285565b9061105661105183611027565b6102c4565b918252565b369037565b9061108561106d83611044565b9260208061107b8693611027565b920191039061105b565b565b634e487b7160e01b600052603260045260246000fd5b5190565b906110ab8261109d565b8110156110bc576020809102010190565b611087565b906110cb906100e6565b9052565b6110e36110de6110e892610c36565b61069e565b61018b565b90565b60209181520190565b60200190565b611103906100e6565b9052565b90611114816020936110fa565b0190565b60200190565b9061113b61113561112e8461109d565b80936110eb565b926110f4565b9060005b81811061114c5750505090565b90919261116561115f6001928651611107565b94611118565b910191909161113f565b6111aa6111b1946111a0611195606095999896996080860190868203600088015261111e565b986020850190610853565b6040830190610853565b0190610846565b565b6111c76111c26111cc92610c17565b61069e565b6100db565b90565b6111d8906111b3565b90565b60018060a01b031690565b6111f26111f7916108d8565b6111db565b90565b61120490546111e6565b90565b611210906106f1565b90565b905051906112208261018e565b565b9060208282031261123c5761123991600001611213565b90565b6100a0565b61124a906100aa565b9052565b5190565b60209181520190565b61127a611283602093611288936112718161124e565b93848093611252565b958691016104e5565b61027b565b0190565b5190565b60209181520190565b60200190565b6112a89061018b565b9052565b906020806112d0936112c6600082015160008601906110fa565b015191019061129f565b565b906112df816040936112ac565b0190565b60200190565b906113066113006112f98461128c565b8093611290565b92611299565b9060005b8181106113175750505090565b90919261133061132a60019286516112d2565b946112e3565b910191909161130a565b6113a691608061138361137161135f60a085016000870151868203600088015261125b565b6020860151858203602087015261125b565b604085015184820360408601526112e9565b92611396606082015160608501906110fa565b015190608081840391015261125b565b90565b916113cd926113c060408201936000830190611241565b602081840391015261133a565b90565b9160206113f29294936113eb60408201966000830190610853565b0190610853565b565b91602061141692949361140f60408201966000830190610846565b0190610853565b565b611421816103e1565b0361142857565b600080fd5b9050519061143a82611418565b565b90602082820312611456576114539160000161142d565b90565b6100a0565b909594926114a7946114966114a09261148c60809661148260a088019c6000890190610846565b6020870190610846565b6040850190610853565b6060830190610846565b0190610853565b565b6115ab60039694956115958361156b61155261154d88996114c8610fd7565b506114d1610b1a565b506115486114dd610fb3565b9e8f6115406115276115226114fe6114f9600286018d90610bb9565b610ffb565b9f61151d61151461150f600261100b565b611060565b9c8787016106bd565b610709565b610ffb565b61153b8a6115356000610c61565b906110a1565b6110c1565b018a906106bd565b610709565b610ffb565b6115668361156060016110cf565b906110a1565b6110c1565b6115868993339061157a610095565b9586946020860161116f565b6020820181038252038261029b565b83908588906115a460006111cf565b9293611c4b565b6115bf6115ba600089016111fa565b611207565b60206320487ded9184906115e585946115f06115d9610095565b968795869485946107f8565b8452600484016113a9565b03915afa90811561180e576000916117e0575b50968761162161161b611615306107ec565b3161018b565b9161018b565b116117b057611637611632866107d4565b6107e0565b90602063095ea7b39261165461164f600085016111fa565b611207565b9061167360008c9661167e611667610095565b988996879586946107f8565b8452600484016113f4565b03925af19182156117ab5760006116a7926116a292602095611780575b50016111fa565b611207565b916396f4e9f96116ce8a9491948693956116d96116c2610095565b978896879586946107f8565b8452600484016113a9565b03925af190811561177b5760009161174d575b509485919293909361174861170160006111cf565b89906117366117307fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca04397610926565b97610b9d565b9761173f610095565b9586958661145b565b0390a3565b61176e915060203d8111611774575b611766818361029b565b81019061143c565b386116ec565b503d61175c565b610893565b61179f90863d81116117a4575b611797818361029b565b810190610827565b61169b565b503d61178d565b610893565b876117ba306107ec565b316117dc6117c6610095565b928392634787a10360e11b8452600484016113d0565b0390fd5b611801915060203d8111611807575b6117f9818361029b565b810190611222565b38611603565b503d6117ef565b610893565b61181c906106f1565b90565b61182830611813565b61185a6118547f00000000000000000000000000000000000000000000000000000000000000006100e6565b916100e6565b14801561188b575b61186857565b611870610095565b63703e46dd60e11b81528061188760048201610151565b0390fd5b50611894611d5b565b6118c66118c07f00000000000000000000000000000000000000000000000000000000000000006100e6565b916100e6565b1415611862565b6118d6906106d5565b90565b6118e2906118cd565b90565b6118ee906106f1565b90565b919061190590600060208501940190610846565b565b9190611935602061191f61191a866118d9565b6118e5565b6352d1902d9061192d610095565b9384926107f8565b8252818061194560048201610151565b03915afa80916000926119e5575b501560001461198f57505090600161196957505b565b61198b90611975610095565b918291634c9c8ce360e01b8352600483016118f1565b0390fd5b92836119aa6119a461199f610b52565b6103e1565b916103e1565b036119bf576119ba929350611d82565b611967565b6119e1846119cb610095565b918291632a87526960e21b8352600483016103f1565b0390fd5b611a0791925060203d8111611a0e575b6119ff818361029b565b81019061143c565b9038611953565b503d6119f5565b611a1e30611813565b611a50611a4a7f00000000000000000000000000000000000000000000000000000000000000006100e6565b916100e6565b03611a5757565b611a5f610095565b63703e46dd60e11b815280611a7660048201610151565b0390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611aa860a06102c4565b90565b606090565b606090565b600090565b611ac2611a9e565b9060208080808086611ad2611aab565b815201611add611aab565b815201611ae8611ab0565b815201611af3611ab5565b815201611afe611aab565b81525050565b611b0c611aba565b90565b67ffffffffffffffff8111611b275760208091020190565b610285565b90611b3e611b3983611b0f565b6102c4565b918252565b611b4d60406102c4565b90565b600090565b611b5d611b43565b9060208083611b6a611ab5565b815201611b75611b50565b81525050565b611b83611b55565b90565b60005b828110611b9557505050565b602090611ba0611b7b565b8184015201611b89565b90611bcf611bb783611b2c565b92602080611bc58693611b0f565b9201910390611b86565b565b611bdb60406102c4565b90565b90611be89061018b565b9052565b90611bf68261128c565b811015611c07576020809102010190565b611087565b611c1660206102c4565b90565b90565b611c30611c2b611c3592611c19565b61069e565b61018b565b90565b611c4260a06102c4565b90565b52565b52565b90611d41611cdc95611ceb611d4a94611cc6611d539897611c6a611b04565b50611ca0611c80611c7b60016110cf565b611baa565b9791611c97611c8d611bd1565b93600085016110c1565b60208301611bde565b611cc08791600090611cba611cb483610c61565b85611bec565b52610c61565b90611bec565b5150611cd0610095565b988991602083016118f1565b6020820181038252038861029b565b91611d38611d18622dc6c0611d13611d0a611d04611c0c565b92611c1c565b60008301611bde565b611e77565b9593611d2f611d25611c38565b9960008b01611c45565b60208901611c45565b60408701611c48565b606085016110c1565b60808301611c45565b90565b600090565b611d63611d56565b50611d7f6000611d79611d74610b52565b611ebc565b01610ffb565b90565b90611d8c82611ebf565b81611db77fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916106fd565b90611dc0610095565b80611dca81610151565b0390a2611dd68161124e565b611de9611de36000610c61565b9161018b565b11600014611dfe57611dfa91611f9d565b505b565b5050611e08611f1d565b611dfc565b606090565b90565b63ffffffff60e01b1690565b611e35611e30611e3a92611e12565b6107f8565b611e15565b90565b611e4a6397a657c9611e21565b90565b90600080611e5f93015191019061129f565b565b9190611e7590600060208501940190611e4d565b565b611eb9600491611e85611e0d565b50611eaa611e91611e3d565b91611e9a610095565b9485936020850190815201611e61565b6020820181038252038261029b565b90565b90565b803b611ed4611ece6000610c61565b9161018b565b14611ef757611ef5906000611eef611eea610b52565b611ebc565b01610745565b565b611f1990611f03610095565b918291634c9c8ce360e01b8352600483016118f1565b0390fd5b34611f31611f2b6000610c61565b9161018b565b11611f3857565b611f40610095565b63b398979f60e01b815280611f5760048201610151565b0390fd5b90611f6d611f68836102d9565b6102c4565b918252565b3d600014611f8f57611f833d611f5b565b903d6000602084013e5b565b611f97611e0d565b90611f8d565b600080611fca93611fac611e0d565b508390602081019051915af490611fc1611f72565b90919091611fcd565b90565b90611fe190611fda611e0d565b50156107fe565b600014611fee575061205b565b611ff78261124e565b61200a6120046000610c61565b9161018b565b148061203f575b612019575090565b61203b90612025610095565b918291639996b31560e01b8352600483016118f1565b0390fd5b50803b61205561204f6000610c61565b9161018b565b14612011565b6120648161124e565b6120776120716000610c61565b9161018b565b1160001461208757805190602001fd5b61208f610095565b630a12f52160e11b8152806120a660048201610151565b0390fdfea2646970667358221220dc7674e5d9d80155871db1cf68cec392d29fb75268f84874f70982f9a1834bcc64736f6c63430008190033",
  "deployedBytecode": "0x60806040526004361015610015575b3661069957005b61002060003561008f565b8063293618f41461008a5780632b81cb8e146100855780634f1ef2861461008057806352d1902d1461007b578063ad3cb1cc14610076578063cca2c1c8146100715763df3d33050361000e57610662565b6105b7565b610554565b610407565b6103a7565b610234565b610157565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b67ffffffffffffffff1690565b6100c0816100aa565b036100c757565b600080fd5b905035906100d9826100b7565b565b60018060a01b031690565b6100ef906100db565b90565b6100fb816100e6565b0361010257565b600080fd5b90503590610114826100f2565b565b909160608284031261014c5761014961013284600085016100cc565b936101408160208601610107565b93604001610107565b90565b6100a0565b60000190565b346101865761017061016a366004610116565b91610765565b610178610095565b8061018281610151565b0390f35b61009b565b90565b6101978161018b565b0361019e57565b600080fd5b905035906101b08261018e565b565b91906101008382031261022f576101cc8160008501610107565b926101da8260208301610107565b926101e883604084016101a3565b926101f681606085016101a3565b9261020482608083016101a3565b9261022c6102158460a085016101a3565b936102238160c086016101a3565b9360e0016101a3565b90565b6100a0565b3461026c576102566102473660046101b2565b96959095949194939293610965565b61025e610095565b8061026881610151565b0390f35b61009b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906102a59061027b565b810190811067ffffffffffffffff8211176102bf57604052565b610285565b906102d76102d0610095565b928361029b565b565b67ffffffffffffffff81116102f7576102f360209161027b565b0190565b610285565b90826000939282370152565b9092919261031d610318826102d9565b6102c4565b9381855260208501908284011161033957610337926102fc565b565b610276565b9080601f8301121561035c5781602061035993359101610308565b90565b610271565b9190916040818403126103a25761037b8360008301610107565b92602082013567ffffffffffffffff811161039d5761039a920161033e565b90565b6100a5565b6100a0565b6103bb6103b5366004610361565b90610b0e565b6103c3610095565b806103cd81610151565b0390f35b60009103126103dc57565b6100a0565b90565b6103ed906103e1565b9052565b9190610405906000602085019401906103e4565b565b34610437576104173660046103d1565b610433610422610b8a565b61042a610095565b918291826103f1565b0390f35b61009b565b67ffffffffffffffff811161045a5761045660209161027b565b0190565b610285565b9061047161046c8361043c565b6102c4565b918252565b60007f352e302e30000000000000000000000000000000000000000000000000000000910152565b6104a8600561045f565b906104b560208301610476565b565b6104bf61049e565b90565b6104ca6104b7565b90565b6104d56104c2565b90565b5190565b60209181520190565b60005b8381106104f9575050906000910152565b8060209183015181850152016104e8565b61052961053260209361053793610520816104d8565b938480936104dc565b958691016104e5565b61027b565b0190565b610551916020820191600081840391015261050a565b90565b34610584576105643660046103d1565b61058061056f6104cd565b610577610095565b9182918261053b565b0390f35b61009b565b91906040838203126105b257806105a66105af92600086016100cc565b93602001610107565b90565b6100a0565b346105e6576105d06105ca366004610589565b90610bd1565b6105d8610095565b806105e281610151565b0390f35b61009b565b6105f4906100e6565b90565b610600816105eb565b0361060757565b600080fd5b90503590610619826105f7565b565b60808183031261065d57610632826000830161060c565b9261065a61064384602085016100cc565b9361065181604086016100cc565b936060016100cc565b90565b6100a0565b346106945761067e61067536600461061b565b92919091610fa5565b610686610095565b8061069081610151565b0390f35b61009b565b600080fd5b90565b6106b56106b06106ba926100aa565b61069e565b61018b565b90565b906106c7906106a1565b600052602052604060002090565b6106e96106e46106ee926100db565b61069e565b6100db565b90565b6106fa906106d5565b90565b610706906106f1565b90565b90610713906106fd565b600052602052604060002090565b60001b90565b9061073860018060a01b0391610721565b9181191691161790565b90565b9061075a610755610761926106fd565b610742565b8254610727565b9055565b61078b929161078161078692600361077b610fb3565b016106bd565b610709565b610745565b565b634e487b7160e01b600052601160045260246000fd5b6107b26107b89193929361018b565b9261018b565b82018092116107c357565b61078d565b6107d1906106d5565b90565b6107dd906107c8565b90565b6107e9906106f1565b90565b6107f5906106f1565b90565b60e01b90565b151590565b61080c816107fe565b0361081357565b600080fd5b9050519061082582610803565b565b906020828203126108415761083e91600001610818565b90565b6100a0565b61084f906100e6565b9052565b61085c9061018b565b9052565b60409061088a610891949695939661088060608401986000850190610846565b6020830190610846565b0190610853565b565b61089b610095565b3d6000823e3d90fd5b60a01c90565b67ffffffffffffffff1690565b6108c36108c8916108a4565b6108aa565b90565b6108d590546108b7565b90565b60001c90565b6108ea6108ef916108d8565b6108aa565b90565b6108fc90546108de565b90565b60401c90565b610911610916916108ff565b6108aa565b90565b6109239054610905565b90565b61092f906103e1565b90565b60409061095c610963949695939661095260608401986000850190610846565b6020830190610853565b0190610853565b565b9590969196939293610975610fb3565b9461098b6109848a87906107a3565b84906107a3565b988960206109a061099b8c6107d4565b6107e0565b6323b872dd906109ce600033936109d96109b9306107ec565b976109c2610095565b988997889687956107f8565b855260048501610860565b03925af18015610ae957610abd575b50866000016109f6906108cb565b91899184909192610a06946114a9565b9690969486600101610a17906108f2565b91899184909192610a27946114a9565b93909395600101610a3790610919565b928892909192610a46946114a9565b9190919490610a54916107a3565b90610a5e916107a3565b90919293947f8f131ca39c983032bca048bd1763cf6b98c596965441607258bd290db5ff35af92610a8e90610926565b93610a9890610926565b94610aa290610926565b95610aab610095565b928392610ab89284610932565b0390a4565b610add9060203d8111610ae2575b610ad5818361029b565b810190610827565b6109e8565b503d610acb565b610893565b90610b0091610afb61181f565b610b02565b565b90610b0c91611907565b565b90610b1891610aee565b565b600090565b610b3090610b2b611a15565b610b7e565b90565b90565b610b4a610b45610b4f92610b33565b610721565b6103e1565b90565b610b7b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610b36565b90565b50610b87610b52565b90565b610b9a610b95610b1a565b610b1f565b90565b610bb1610bac610bb6926100aa565b61069e565b6100aa565b90565b90610bc390610b9d565b600052602052604060002090565b90610be9610bee926002610be3610fb3565b01610bb9565b610745565b565b60ff1690565b610c02610c07916108ff565b610bf0565b90565b610c149054610bf6565b90565b90565b610c2e610c29610c3392610c17565b61069e565b6100aa565b90565b90565b610c4d610c48610c5292610c36565b61069e565b6100aa565b90565b610c5e906106f1565b90565b610c75610c70610c7a92610c17565b61069e565b61018b565b90565b90610c9067ffffffffffffffff91610721565b9181191691161790565b90565b90610cb2610cad610cb992610b9d565b610c9a565b8254610c7d565b9055565b60401b90565b90610cd768ff000000000000000091610cbd565b9181191691161790565b610cea906107fe565b90565b90565b90610d05610d00610d0c92610ce1565b610ced565b8254610cc3565b9055565b610d1990610c39565b9052565b9190610d3190600060208501940190610d10565b565b909192610d3e611a7a565b93610d54610d4e60008701610c0a565b156107fe565b93610d61600087016108f2565b80610d75610d6f6000610c1a565b916100aa565b1480610e9a575b90610d90610d8a6001610c39565b916100aa565b1480610e71575b610da29091156107fe565b9081610e60575b50610e3d57610dd393610dc8610dbf6001610c39565b60008901610c9d565b85610e2a575b610f67565b610ddb575b50565b610de9906000809101610cf0565b6001610e217fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d291610e18610095565b91829182610d1d565b0390a138610dd8565b610e38600160008901610cf0565b610dce565b610e45610095565b63f92ee8a960e01b815280610e5c60048201610151565b0390fd5b610e6b9150156107fe565b38610da9565b50610da2610e7e30610c55565b3b610e92610e8c6000610c61565b9161018b565b149050610d97565b5085610d7c565b610eaa906106d5565b90565b610eb690610ea1565b90565b90565b90610ed1610ecc610ed892610ead565b610eb9565b8254610727565b9055565b60a01b90565b90610ef867ffffffffffffffff60a01b91610edc565b9181191691161790565b90610f17610f12610f1e92610b9d565b610c9a565b8254610ee2565b9055565b90610f3d6fffffffffffffffff000000000000000091610cbd565b9181191691161790565b90610f5c610f57610f6392610b9d565b610c9a565b8254610f22565b9055565b9192610f9c610fa394610f94600194610f8b610f81610fb3565b9760008901610ebc565b60008701610f02565b838501610c9d565b9101610f47565b565b90610fb1939291610d33565b565b7f42631c0a284ed7d4e8004e5fc9bdf44dbbde6ac8d81ad52470bb1ab538a9aa0090565b600090565b60018060a01b031690565b610ff3610ff8916108d8565b610fdc565b90565b6110059054610fe7565b90565b90565b61101f61101a61102492611008565b61069e565b61018b565b90565b67ffffffffffffffff811161103f5760208091020190565b610285565b9061105661105183611027565b6102c4565b918252565b369037565b9061108561106d83611044565b9260208061107b8693611027565b920191039061105b565b565b634e487b7160e01b600052603260045260246000fd5b5190565b906110ab8261109d565b8110156110bc576020809102010190565b611087565b906110cb906100e6565b9052565b6110e36110de6110e892610c36565b61069e565b61018b565b90565b60209181520190565b60200190565b611103906100e6565b9052565b90611114816020936110fa565b0190565b60200190565b9061113b61113561112e8461109d565b80936110eb565b926110f4565b9060005b81811061114c5750505090565b90919261116561115f6001928651611107565b94611118565b910191909161113f565b6111aa6111b1946111a0611195606095999896996080860190868203600088015261111e565b986020850190610853565b6040830190610853565b0190610846565b565b6111c76111c26111cc92610c17565b61069e565b6100db565b90565b6111d8906111b3565b90565b60018060a01b031690565b6111f26111f7916108d8565b6111db565b90565b61120490546111e6565b90565b611210906106f1565b90565b905051906112208261018e565b565b9060208282031261123c5761123991600001611213565b90565b6100a0565b61124a906100aa565b9052565b5190565b60209181520190565b61127a611283602093611288936112718161124e565b93848093611252565b958691016104e5565b61027b565b0190565b5190565b60209181520190565b60200190565b6112a89061018b565b9052565b906020806112d0936112c6600082015160008601906110fa565b015191019061129f565b565b906112df816040936112ac565b0190565b60200190565b906113066113006112f98461128c565b8093611290565b92611299565b9060005b8181106113175750505090565b90919261133061132a60019286516112d2565b946112e3565b910191909161130a565b6113a691608061138361137161135f60a085016000870151868203600088015261125b565b6020860151858203602087015261125b565b604085015184820360408601526112e9565b92611396606082015160608501906110fa565b015190608081840391015261125b565b90565b916113cd926113c060408201936000830190611241565b602081840391015261133a565b90565b9160206113f29294936113eb60408201966000830190610853565b0190610853565b565b91602061141692949361140f60408201966000830190610846565b0190610853565b565b611421816103e1565b0361142857565b600080fd5b9050519061143a82611418565b565b90602082820312611456576114539160000161142d565b90565b6100a0565b909594926114a7946114966114a09261148c60809661148260a088019c6000890190610846565b6020870190610846565b6040850190610853565b6060830190610846565b0190610853565b565b6115ab60039694956115958361156b61155261154d88996114c8610fd7565b506114d1610b1a565b506115486114dd610fb3565b9e8f6115406115276115226114fe6114f9600286018d90610bb9565b610ffb565b9f61151d61151461150f600261100b565b611060565b9c8787016106bd565b610709565b610ffb565b61153b8a6115356000610c61565b906110a1565b6110c1565b018a906106bd565b610709565b610ffb565b6115668361156060016110cf565b906110a1565b6110c1565b6115868993339061157a610095565b9586946020860161116f565b6020820181038252038261029b565b83908588906115a460006111cf565b9293611c4b565b6115bf6115ba600089016111fa565b611207565b60206320487ded9184906115e585946115f06115d9610095565b968795869485946107f8565b8452600484016113a9565b03915afa90811561180e576000916117e0575b50968761162161161b611615306107ec565b3161018b565b9161018b565b116117b057611637611632866107d4565b6107e0565b90602063095ea7b39261165461164f600085016111fa565b611207565b9061167360008c9661167e611667610095565b988996879586946107f8565b8452600484016113f4565b03925af19182156117ab5760006116a7926116a292602095611780575b50016111fa565b611207565b916396f4e9f96116ce8a9491948693956116d96116c2610095565b978896879586946107f8565b8452600484016113a9565b03925af190811561177b5760009161174d575b509485919293909361174861170160006111cf565b89906117366117307fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca04397610926565b97610b9d565b9761173f610095565b9586958661145b565b0390a3565b61176e915060203d8111611774575b611766818361029b565b81019061143c565b386116ec565b503d61175c565b610893565b61179f90863d81116117a4575b611797818361029b565b810190610827565b61169b565b503d61178d565b610893565b876117ba306107ec565b316117dc6117c6610095565b928392634787a10360e11b8452600484016113d0565b0390fd5b611801915060203d8111611807575b6117f9818361029b565b810190611222565b38611603565b503d6117ef565b610893565b61181c906106f1565b90565b61182830611813565b61185a6118547f00000000000000000000000000000000000000000000000000000000000000006100e6565b916100e6565b14801561188b575b61186857565b611870610095565b63703e46dd60e11b81528061188760048201610151565b0390fd5b50611894611d5b565b6118c66118c07f00000000000000000000000000000000000000000000000000000000000000006100e6565b916100e6565b1415611862565b6118d6906106d5565b90565b6118e2906118cd565b90565b6118ee906106f1565b90565b919061190590600060208501940190610846565b565b9190611935602061191f61191a866118d9565b6118e5565b6352d1902d9061192d610095565b9384926107f8565b8252818061194560048201610151565b03915afa80916000926119e5575b501560001461198f57505090600161196957505b565b61198b90611975610095565b918291634c9c8ce360e01b8352600483016118f1565b0390fd5b92836119aa6119a461199f610b52565b6103e1565b916103e1565b036119bf576119ba929350611d82565b611967565b6119e1846119cb610095565b918291632a87526960e21b8352600483016103f1565b0390fd5b611a0791925060203d8111611a0e575b6119ff818361029b565b81019061143c565b9038611953565b503d6119f5565b611a1e30611813565b611a50611a4a7f00000000000000000000000000000000000000000000000000000000000000006100e6565b916100e6565b03611a5757565b611a5f610095565b63703e46dd60e11b815280611a7660048201610151565b0390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b611aa860a06102c4565b90565b606090565b606090565b600090565b611ac2611a9e565b9060208080808086611ad2611aab565b815201611add611aab565b815201611ae8611ab0565b815201611af3611ab5565b815201611afe611aab565b81525050565b611b0c611aba565b90565b67ffffffffffffffff8111611b275760208091020190565b610285565b90611b3e611b3983611b0f565b6102c4565b918252565b611b4d60406102c4565b90565b600090565b611b5d611b43565b9060208083611b6a611ab5565b815201611b75611b50565b81525050565b611b83611b55565b90565b60005b828110611b9557505050565b602090611ba0611b7b565b8184015201611b89565b90611bcf611bb783611b2c565b92602080611bc58693611b0f565b9201910390611b86565b565b611bdb60406102c4565b90565b90611be89061018b565b9052565b90611bf68261128c565b811015611c07576020809102010190565b611087565b611c1660206102c4565b90565b90565b611c30611c2b611c3592611c19565b61069e565b61018b565b90565b611c4260a06102c4565b90565b52565b52565b90611d41611cdc95611ceb611d4a94611cc6611d539897611c6a611b04565b50611ca0611c80611c7b60016110cf565b611baa565b9791611c97611c8d611bd1565b93600085016110c1565b60208301611bde565b611cc08791600090611cba611cb483610c61565b85611bec565b52610c61565b90611bec565b5150611cd0610095565b988991602083016118f1565b6020820181038252038861029b565b91611d38611d18622dc6c0611d13611d0a611d04611c0c565b92611c1c565b60008301611bde565b611e77565b9593611d2f611d25611c38565b9960008b01611c45565b60208901611c45565b60408701611c48565b606085016110c1565b60808301611c45565b90565b600090565b611d63611d56565b50611d7f6000611d79611d74610b52565b611ebc565b01610ffb565b90565b90611d8c82611ebf565b81611db77fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916106fd565b90611dc0610095565b80611dca81610151565b0390a2611dd68161124e565b611de9611de36000610c61565b9161018b565b11600014611dfe57611dfa91611f9d565b505b565b5050611e08611f1d565b611dfc565b606090565b90565b63ffffffff60e01b1690565b611e35611e30611e3a92611e12565b6107f8565b611e15565b90565b611e4a6397a657c9611e21565b90565b90600080611e5f93015191019061129f565b565b9190611e7590600060208501940190611e4d565b565b611eb9600491611e85611e0d565b50611eaa611e91611e3d565b91611e9a610095565b9485936020850190815201611e61565b6020820181038252038261029b565b90565b90565b803b611ed4611ece6000610c61565b9161018b565b14611ef757611ef5906000611eef611eea610b52565b611ebc565b01610745565b565b611f1990611f03610095565b918291634c9c8ce360e01b8352600483016118f1565b0390fd5b34611f31611f2b6000610c61565b9161018b565b11611f3857565b611f40610095565b63b398979f60e01b815280611f5760048201610151565b0390fd5b90611f6d611f68836102d9565b6102c4565b918252565b3d600014611f8f57611f833d611f5b565b903d6000602084013e5b565b611f97611e0d565b90611f8d565b600080611fca93611fac611e0d565b508390602081019051915af490611fc1611f72565b90919091611fcd565b90565b90611fe190611fda611e0d565b50156107fe565b600014611fee575061205b565b611ff78261124e565b61200a6120046000610c61565b9161018b565b148061203f575b612019575090565b61203b90612025610095565b918291639996b31560e01b8352600483016118f1565b0390fd5b50803b61205561204f6000610c61565b9161018b565b14612011565b6120648161124e565b6120776120716000610c61565b9161018b565b1160001461208757805190602001fd5b61208f610095565b630a12f52160e11b8152806120a660048201610151565b0390fdfea2646970667358221220dc7674e5d9d80155871db1cf68cec392d29fb75268f84874f70982f9a1834bcc64736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "swap(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "a for amoy, b for base sepolia, c for fuji"
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}