{
  "address": "0xd5FE8f5AB1C68d138A0ED826f9896A272D41bfd0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "DestinationChainNotAllowlisted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "FailedToWithdrawEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReceiverAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calculatedFees",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "InvokeSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "TokensTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRouterClient",
          "name": "router_",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "chainASelector_",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "chainBSelector_",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "chainCSelector_",
          "type": "uint64"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "LynkMessager",
          "type": "address"
        }
      ],
      "name": "setChainMessager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minC",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb63af7b4109c3c6def50dcd9cdddd22b42d0da62b4d596ff1b706093ad1e27b1",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xba45b3d7A42c3554fa98bDC3F790da2676Cb0560",
    "contractAddress": null,
    "transactionIndex": 68,
    "gasUsed": "1595124",
    "logsBloom": "0x
    "blockHash": "0xe17af12655e564f2c64799b8054953a6a5ed041e0741970db19baae2240947ec",
    "transactionHash": "0xb63af7b4109c3c6def50dcd9cdddd22b42d0da62b4d596ff1b706093ad1e27b1",
    "logs": [],
    "blockNumber": 6025985,
    "cumulativeGasUsed": "11693460",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "90c654ef1b69b75be2b8ab00f91f7923",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"DestinationChainNotAllowlisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedToWithdrawEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceiverAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedFees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"InvokeSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRouterClient\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"chainASelector_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"chainBSelector_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"chainCSelector_\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"LynkMessager\",\"type\":\"address\"}],\"name\":\"setChainMessager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minC\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"swap(address,address,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"a for amoy, b for base sepolia, c for fuji\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/LynkSwapRouter.sol\":\"LynkSwapRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"src/LynkSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.25;\\n\\nimport { Client } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport { IERC20 } from\\n    \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { IRouterClient } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\n\\ncontract LynkSwapRouter is UUPSUpgradeable {\\n    struct LynkSwapRouterStorage {\\n        IRouterClient router;\\n        uint64 chainASelector;\\n        uint64 chainBSelector;\\n        uint64 chainCSelector;\\n        mapping(uint64 => address) messagers;\\n    }\\n\\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees); // Used to make sure contract has enough\\n        // balance to cover the fees.\\n    error NothingToWithdraw(); // Used when trying to withdraw Ether but there's nothing to withdraw.\\n    error FailedToWithdrawEth(address owner, address target, uint256 value); // Used when the withdrawal of Ether fails.\\n    error DestinationChainNotAllowlisted(uint64 destinationChainSelector); // Used when the destination chain has not\\n        // been allowlisted by the contract owner.\\n    error InvalidReceiverAddress(); // Used when the receiver address is 0.\\n\\n    // Event emitted when the tokens are transferred to an account on another chain.\\n    // The chain selector of the destination chain.\\n    // The address of the receiver on the destination chain.\\n    // The token address that was transferred.\\n    // The token amount that was transferred.\\n    // the token address used to pay CCIP fees.\\n    // The fees paid for sending the message.\\n    event TokensTransferred( // The unique ID of the message.\\n        bytes32 indexed messageId,\\n        uint64 indexed destinationChainSelector,\\n        address receiver,\\n        address token,\\n        uint256 tokenAmount,\\n        address feeToken,\\n        uint256 fees\\n    );\\n\\n    event InvokeSwap(uint256 feeAmount);\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"lynkswap.storage.router\\\")) - 1)) & ~ bytes32(uint256(0xff))\\n    //\\n    bytes32 private constant LynkSwapRouterStorageLocation =\\n        0x42631c0a284ed7d4e8004e5fc9bdf44dbbde6ac8d81ad52470bb1ab538a9aa00;\\n\\n    function initialize(\\n        IRouterClient router_,\\n        uint64 chainASelector_,\\n        uint64 chainBSelector_,\\n        uint64 chainCSelector_\\n    )\\n        external\\n        initializer\\n    {\\n        LynkSwapRouterStorage storage $ = _getLynkSwapRouterStorage();\\n        $.router = router_;\\n        $.chainASelector = chainASelector_;\\n        $.chainBSelector = chainBSelector_;\\n        $.chainCSelector = chainCSelector_;\\n    }\\n\\n    /**\\n     * @dev a for amoy, b for base sepolia, c for fuji\\n     */\\n    function swap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountA,\\n        uint256 minA,\\n        uint256 amountB,\\n        uint256 minB,\\n        uint256 amountC,\\n        uint256 minC\\n    )\\n        external\\n    {\\n        LynkSwapRouterStorage storage $ = _getLynkSwapRouterStorage();\\n\\n        uint256 feeA = _swapOnSingleChain($.chainASelector, tokenIn, tokenOut, amountA, minA);\\n        uint256 feeB = _swapOnSingleChain($.chainBSelector, tokenIn, tokenOut, amountB, minB);\\n        uint256 feeC = _swapOnSingleChain($.chainCSelector, tokenIn, tokenOut, amountC, minC);\\n\\n        uint256 totalFee = feeA + feeB + feeC;\\n\\n        emit InvokeSwap(totalFee);\\n    }\\n\\n    function setChainMessager(uint64 chainSelector, address LynkMessager) public {\\n        LynkSwapRouterStorage storage $ = _getLynkSwapRouterStorage();\\n\\n        $.messagers[chainSelector] = LynkMessager;\\n    }\\n\\n    function _swapOnSingleChain(\\n        uint64 chainSelector,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 minOut\\n    )\\n        internal\\n        returns (uint256 fees)\\n    {\\n        LynkSwapRouterStorage storage $ = _getLynkSwapRouterStorage();\\n\\n        address messager = $.messagers[chainSelector];\\n\\n        bytes memory swapData = abi.encode(inToken, outToken, inAmount, minOut);\\n\\n        Client.EVM2AnyMessage memory evm2AnyMessage =\\n            _buildCCIPMessage(messager, inToken, inAmount, address(0), swapData);\\n\\n        // Get the fee required to send the message\\n        fees = $.router.getFee(chainSelector, evm2AnyMessage);\\n\\n        if (fees > address(this).balance) {\\n            revert NotEnoughBalance(address(this).balance, fees);\\n        }\\n\\n        // approve the Router to spend tokens on contract's behalf. It will spend the amount of the given token\\n        IERC20(inToken).approve(address($.router), inAmount);\\n\\n        // Send the message through the router and store the returned message ID\\n        bytes32 messageId = $.router.ccipSend{ value: fees }(chainSelector, evm2AnyMessage);\\n\\n        // Emit an event with message details\\n        emit TokensTransferred(messageId, chainSelector, messager, inToken, inAmount, address(0), fees);\\n    }\\n\\n    /// @notice Construct a CCIP message.\\n    /// @dev This function will create an EVM2AnyMessage struct with all the necessary information for tokens transfer.\\n    /// @param _receiver The address of the receiver.\\n    /// @param _token The token to be transferred.\\n    /// @param _amount The amount of the token to be transferred.\\n    /// @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.\\n    /// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP\\n    /// message.\\n    function _buildCCIPMessage(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        address _feeTokenAddress,\\n        bytes memory data\\n    )\\n        private\\n        pure\\n        returns (Client.EVM2AnyMessage memory)\\n    {\\n        // Set the token amounts\\n        Client.EVMTokenAmount[] memory tokenAmounts = new Client.EVMTokenAmount[](1);\\n        tokenAmounts[0] = Client.EVMTokenAmount({ token: _token, amount: _amount });\\n\\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n        return Client.EVM2AnyMessage({\\n            receiver: abi.encode(_receiver), // ABI-encoded receiver address\\n            data: data, // No data\\n            tokenAmounts: tokenAmounts, // The amount and type of token being transferred\\n            extraArgs: Client._argsToBytes(\\n                // set gas limit to max\\n                Client.EVMExtraArgsV1({ gasLimit: 3_000_000 })\\n                ),\\n            // Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\\n            feeToken: _feeTokenAddress\\n        });\\n    }\\n\\n    function _getLynkSwapRouterStorage() internal pure returns (LynkSwapRouterStorage storage $) {\\n        assembly {\\n            $.slot := LynkSwapRouterStorageLocation\\n        }\\n    }\\n\\n    // don't add auth for test\\n    function _authorizeUpgrade(address newImplementation) internal override { }\\n}\\n\",\"keccak256\":\"0x1bfdcd4020d78fa05447f38593eb71dd6d75d727ad3088092dfdf8f2f8855181\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250348015604257600080fd5b50608051611beb61006c600039600081816108db015281816109300152610ae30152611beb6000f3fe6080604052600436106100555760003560e01c80632b81cb8e1461005a5780634f1ef2861461008357806352d1902d1461009f578063ad3cb1cc146100ca578063cca2c1c8146100f5578063df3d33051461011e575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c919061118e565b610147565b005b61009d6004803603810190610098919061138a565b61022f565b005b3480156100ab57600080fd5b506100b461024e565b6040516100c191906113ff565b60405180910390f35b3480156100d657600080fd5b506100df610281565b6040516100ec9190611499565b60405180910390f35b34801561010157600080fd5b5061011c600480360381019061011791906114fb565b6102ba565b005b34801561012a57600080fd5b5061014560048036038101906101409190611579565b610333565b005b600061015161058d565b9050600061017a8260000160149054906101000a900467ffffffffffffffff168b8b8b8b6105b5565b905060006101a38360010160009054906101000a900467ffffffffffffffff168c8c8a8a6105b5565b905060006101cc8460010160089054906101000a900467ffffffffffffffff168d8d89896105b5565b905060008183856101dd919061160f565b6101e7919061160f565b90507fa3c013c18468127d3421d1e049e45ab3dc5ca6ea8cc2093c02020b60ec263567816040516102189190611652565b60405180910390a150505050505050505050505050565b6102376108d9565b610240826109bf565b61024a82826109c2565b5050565b6000610258610ae1565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b60006102c461058d565b9050818160020160008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600061033d610b68565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff1614801561038b5750825b9050600060018367ffffffffffffffff161480156103c0575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156103ce575080155b15610405576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156104555760018560000160086101000a81548160ff0219169083151502179055505b600061045f61058d565b9050898160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550888160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550878160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550868160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505083156105825760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161057991906116b2565b60405180910390a15b505050505050505050565b60007f42631c0a284ed7d4e8004e5fc9bdf44dbbde6ac8d81ad52470bb1ab538a9aa00905090565b6000806105c061058d565b905060008160020160008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008787878760405160200161062994939291906116dc565b6040516020818303038152906040529050600061064a838a89600086610b90565b90508360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320487ded8b836040518363ffffffff1660e01b81526004016106ab92919061190c565b602060405180830381865afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611951565b9450478511156107355747856040517f8f0f420600000000000000000000000000000000000000000000000000000000815260040161072c92919061197e565b60405180910390fd5b8873ffffffffffffffffffffffffffffffffffffffff1663095ea7b38560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518363ffffffff1660e01b81526004016107949291906119a7565b6020604051808303816000875af11580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d79190611a08565b5060008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396f4e9f9878d856040518463ffffffff1660e01b815260040161083a92919061190c565b60206040518083038185885af1158015610858573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061087d9190611a61565b90508a67ffffffffffffffff16817fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca043868d8c60008c6040516108c3959493929190611a8e565b60405180910390a3505050505095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061098657507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661096d610cbc565b73ffffffffffffffffffffffffffffffffffffffff1614155b156109bd576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a2a57506040513d601f19601f82011682018060405250810190610a279190611a61565b60015b610a6b57816040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401610a629190611ae1565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114610ad257806040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600401610ac991906113ff565b60405180910390fd5b610adc8383610d13565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610b66576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b610b98611071565b6000600167ffffffffffffffff811115610bb557610bb461125f565b5b604051908082528060200260200182016040528015610bee57816020015b610bdb6110b6565b815260200190600190039081610bd35790505b50905060405180604001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018681525081600081518110610c3057610c2f611afc565b5b60200260200101819052506040518060a0016040528088604051602001610c579190611ae1565b60405160208183030381529060405281526020018481526020018281526020018573ffffffffffffffffffffffffffffffffffffffff168152602001610cad6040518060200160405280622dc6c0815250610d86565b81525091505095945050505050565b6000610cea7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610e05565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d1c82610e0f565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2600081511115610d7957610d738282610edc565b50610d82565b610d81610f60565b5b5050565b60606397a657c960e01b82604051602401610da19190611b47565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b03610e6b57806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401610e629190611ae1565b60405180910390fd5b80610e987f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610e05565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051610f069190611b9e565b600060405180830381855af49150503d8060008114610f41576040519150601f19603f3d011682016040523d82523d6000602084013e610f46565b606091505b5091509150610f56858383610f9d565b9250505092915050565b6000341115610f9b576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b606082610fb257610fad8261102c565b611024565b60008251148015610fda575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561101c57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016110139190611ae1565b60405180910390fd5b819050611025565b5b9392505050565b60008151111561103f5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a00160405280606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611125826110fa565b9050919050565b6111358161111a565b811461114057600080fd5b50565b6000813590506111528161112c565b92915050565b6000819050919050565b61116b81611158565b811461117657600080fd5b50565b60008135905061118881611162565b92915050565b600080600080600080600080610100898b0312156111af576111ae6110f0565b5b60006111bd8b828c01611143565b98505060206111ce8b828c01611143565b97505060406111df8b828c01611179565b96505060606111f08b828c01611179565b95505060806112018b828c01611179565b94505060a06112128b828c01611179565b93505060c06112238b828c01611179565b92505060e06112348b828c01611179565b9150509295985092959890939650565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112978261124e565b810181811067ffffffffffffffff821117156112b6576112b561125f565b5b80604052505050565b60006112c96110e6565b90506112d5828261128e565b919050565b600067ffffffffffffffff8211156112f5576112f461125f565b5b6112fe8261124e565b9050602081019050919050565b82818337600083830152505050565b600061132d611328846112da565b6112bf565b90508281526020810184848401111561134957611348611249565b5b61135484828561130b565b509392505050565b600082601f83011261137157611370611244565b5b813561138184826020860161131a565b91505092915050565b600080604083850312156113a1576113a06110f0565b5b60006113af85828601611143565b925050602083013567ffffffffffffffff8111156113d0576113cf6110f5565b5b6113dc8582860161135c565b9150509250929050565b6000819050919050565b6113f9816113e6565b82525050565b600060208201905061141460008301846113f0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611454578082015181840152602081019050611439565b60008484015250505050565b600061146b8261141a565b6114758185611425565b9350611485818560208601611436565b61148e8161124e565b840191505092915050565b600060208201905081810360008301526114b38184611460565b905092915050565b600067ffffffffffffffff82169050919050565b6114d8816114bb565b81146114e357600080fd5b50565b6000813590506114f5816114cf565b92915050565b60008060408385031215611512576115116110f0565b5b6000611520858286016114e6565b925050602061153185828601611143565b9150509250929050565b60006115468261111a565b9050919050565b6115568161153b565b811461156157600080fd5b50565b6000813590506115738161154d565b92915050565b60008060008060808587031215611593576115926110f0565b5b60006115a187828801611564565b94505060206115b2878288016114e6565b93505060406115c3878288016114e6565b92505060606115d4878288016114e6565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061161a82611158565b915061162583611158565b925082820190508082111561163d5761163c6115e0565b5b92915050565b61164c81611158565b82525050565b60006020820190506116676000830184611643565b92915050565b6000819050919050565b6000819050919050565b600061169c6116976116928461166d565b611677565b6114bb565b9050919050565b6116ac81611681565b82525050565b60006020820190506116c760008301846116a3565b92915050565b6116d68161111a565b82525050565b60006080820190506116f160008301876116cd565b6116fe60208301866116cd565b61170b6040830185611643565b6117186060830184611643565b95945050505050565b61172a816114bb565b82525050565b600081519050919050565b600082825260208201905092915050565b600061175782611730565b611761818561173b565b9350611771818560208601611436565b61177a8161124e565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6117ba8161111a565b82525050565b6117c981611158565b82525050565b6040820160008201516117e560008501826117b1565b5060208201516117f860208501826117c0565b50505050565b600061180a83836117cf565b60408301905092915050565b6000602082019050919050565b600061182e82611785565b6118388185611790565b9350611843836117a1565b8060005b8381101561187457815161185b88826117fe565b975061186683611816565b925050600181019050611847565b5085935050505092915050565b600060a083016000830151848203600086015261189e828261174c565b915050602083015184820360208601526118b8828261174c565b915050604083015184820360408601526118d28282611823565b91505060608301516118e760608601826117b1565b50608083015184820360808601526118ff828261174c565b9150508091505092915050565b60006040820190506119216000830185611721565b81810360208301526119338184611881565b90509392505050565b60008151905061194b81611162565b92915050565b600060208284031215611967576119666110f0565b5b60006119758482850161193c565b91505092915050565b60006040820190506119936000830185611643565b6119a06020830184611643565b9392505050565b60006040820190506119bc60008301856116cd565b6119c96020830184611643565b9392505050565b60008115159050919050565b6119e5816119d0565b81146119f057600080fd5b50565b600081519050611a02816119dc565b92915050565b600060208284031215611a1e57611a1d6110f0565b5b6000611a2c848285016119f3565b91505092915050565b611a3e816113e6565b8114611a4957600080fd5b50565b600081519050611a5b81611a35565b92915050565b600060208284031215611a7757611a766110f0565b5b6000611a8584828501611a4c565b91505092915050565b600060a082019050611aa360008301886116cd565b611ab060208301876116cd565b611abd6040830186611643565b611aca60608301856116cd565b611ad76080830184611643565b9695505050505050565b6000602082019050611af660008301846116cd565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602082016000820151611b4160008501826117c0565b50505050565b6000602082019050611b5c6000830184611b2b565b92915050565b600081905092915050565b6000611b7882611730565b611b828185611b62565b9350611b92818560208601611436565b80840191505092915050565b6000611baa8284611b6d565b91508190509291505056fea2646970667358221220a274057cac49cdffc00d2859aeabf20763e61bece84c98ef33d1c7f8a57aa6e264736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c80632b81cb8e1461005a5780634f1ef2861461008357806352d1902d1461009f578063ad3cb1cc146100ca578063cca2c1c8146100f5578063df3d33051461011e575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c919061118e565b610147565b005b61009d6004803603810190610098919061138a565b61022f565b005b3480156100ab57600080fd5b506100b461024e565b6040516100c191906113ff565b60405180910390f35b3480156100d657600080fd5b506100df610281565b6040516100ec9190611499565b60405180910390f35b34801561010157600080fd5b5061011c600480360381019061011791906114fb565b6102ba565b005b34801561012a57600080fd5b5061014560048036038101906101409190611579565b610333565b005b600061015161058d565b9050600061017a8260000160149054906101000a900467ffffffffffffffff168b8b8b8b6105b5565b905060006101a38360010160009054906101000a900467ffffffffffffffff168c8c8a8a6105b5565b905060006101cc8460010160089054906101000a900467ffffffffffffffff168d8d89896105b5565b905060008183856101dd919061160f565b6101e7919061160f565b90507fa3c013c18468127d3421d1e049e45ab3dc5ca6ea8cc2093c02020b60ec263567816040516102189190611652565b60405180910390a150505050505050505050505050565b6102376108d9565b610240826109bf565b61024a82826109c2565b5050565b6000610258610ae1565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b60006102c461058d565b9050818160020160008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600061033d610b68565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff1614801561038b5750825b9050600060018367ffffffffffffffff161480156103c0575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156103ce575080155b15610405576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156104555760018560000160086101000a81548160ff0219169083151502179055505b600061045f61058d565b9050898160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550888160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550878160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550868160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505083156105825760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161057991906116b2565b60405180910390a15b505050505050505050565b60007f42631c0a284ed7d4e8004e5fc9bdf44dbbde6ac8d81ad52470bb1ab538a9aa00905090565b6000806105c061058d565b905060008160020160008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008787878760405160200161062994939291906116dc565b6040516020818303038152906040529050600061064a838a89600086610b90565b90508360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320487ded8b836040518363ffffffff1660e01b81526004016106ab92919061190c565b602060405180830381865afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611951565b9450478511156107355747856040517f8f0f420600000000000000000000000000000000000000000000000000000000815260040161072c92919061197e565b60405180910390fd5b8873ffffffffffffffffffffffffffffffffffffffff1663095ea7b38560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518363ffffffff1660e01b81526004016107949291906119a7565b6020604051808303816000875af11580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d79190611a08565b5060008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396f4e9f9878d856040518463ffffffff1660e01b815260040161083a92919061190c565b60206040518083038185885af1158015610858573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061087d9190611a61565b90508a67ffffffffffffffff16817fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca043868d8c60008c6040516108c3959493929190611a8e565b60405180910390a3505050505095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061098657507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661096d610cbc565b73ffffffffffffffffffffffffffffffffffffffff1614155b156109bd576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a2a57506040513d601f19601f82011682018060405250810190610a279190611a61565b60015b610a6b57816040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401610a629190611ae1565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114610ad257806040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600401610ac991906113ff565b60405180910390fd5b610adc8383610d13565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610b66576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b610b98611071565b6000600167ffffffffffffffff811115610bb557610bb461125f565b5b604051908082528060200260200182016040528015610bee57816020015b610bdb6110b6565b815260200190600190039081610bd35790505b50905060405180604001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018681525081600081518110610c3057610c2f611afc565b5b60200260200101819052506040518060a0016040528088604051602001610c579190611ae1565b60405160208183030381529060405281526020018481526020018281526020018573ffffffffffffffffffffffffffffffffffffffff168152602001610cad6040518060200160405280622dc6c0815250610d86565b81525091505095945050505050565b6000610cea7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610e05565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d1c82610e0f565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2600081511115610d7957610d738282610edc565b50610d82565b610d81610f60565b5b5050565b60606397a657c960e01b82604051602401610da19190611b47565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b03610e6b57806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401610e629190611ae1565b60405180910390fd5b80610e987f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610e05565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051610f069190611b9e565b600060405180830381855af49150503d8060008114610f41576040519150601f19603f3d011682016040523d82523d6000602084013e610f46565b606091505b5091509150610f56858383610f9d565b9250505092915050565b6000341115610f9b576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b606082610fb257610fad8261102c565b611024565b60008251148015610fda575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561101c57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016110139190611ae1565b60405180910390fd5b819050611025565b5b9392505050565b60008151111561103f5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060a00160405280606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611125826110fa565b9050919050565b6111358161111a565b811461114057600080fd5b50565b6000813590506111528161112c565b92915050565b6000819050919050565b61116b81611158565b811461117657600080fd5b50565b60008135905061118881611162565b92915050565b600080600080600080600080610100898b0312156111af576111ae6110f0565b5b60006111bd8b828c01611143565b98505060206111ce8b828c01611143565b97505060406111df8b828c01611179565b96505060606111f08b828c01611179565b95505060806112018b828c01611179565b94505060a06112128b828c01611179565b93505060c06112238b828c01611179565b92505060e06112348b828c01611179565b9150509295985092959890939650565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112978261124e565b810181811067ffffffffffffffff821117156112b6576112b561125f565b5b80604052505050565b60006112c96110e6565b90506112d5828261128e565b919050565b600067ffffffffffffffff8211156112f5576112f461125f565b5b6112fe8261124e565b9050602081019050919050565b82818337600083830152505050565b600061132d611328846112da565b6112bf565b90508281526020810184848401111561134957611348611249565b5b61135484828561130b565b509392505050565b600082601f83011261137157611370611244565b5b813561138184826020860161131a565b91505092915050565b600080604083850312156113a1576113a06110f0565b5b60006113af85828601611143565b925050602083013567ffffffffffffffff8111156113d0576113cf6110f5565b5b6113dc8582860161135c565b9150509250929050565b6000819050919050565b6113f9816113e6565b82525050565b600060208201905061141460008301846113f0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611454578082015181840152602081019050611439565b60008484015250505050565b600061146b8261141a565b6114758185611425565b9350611485818560208601611436565b61148e8161124e565b840191505092915050565b600060208201905081810360008301526114b38184611460565b905092915050565b600067ffffffffffffffff82169050919050565b6114d8816114bb565b81146114e357600080fd5b50565b6000813590506114f5816114cf565b92915050565b60008060408385031215611512576115116110f0565b5b6000611520858286016114e6565b925050602061153185828601611143565b9150509250929050565b60006115468261111a565b9050919050565b6115568161153b565b811461156157600080fd5b50565b6000813590506115738161154d565b92915050565b60008060008060808587031215611593576115926110f0565b5b60006115a187828801611564565b94505060206115b2878288016114e6565b93505060406115c3878288016114e6565b92505060606115d4878288016114e6565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061161a82611158565b915061162583611158565b925082820190508082111561163d5761163c6115e0565b5b92915050565b61164c81611158565b82525050565b60006020820190506116676000830184611643565b92915050565b6000819050919050565b6000819050919050565b600061169c6116976116928461166d565b611677565b6114bb565b9050919050565b6116ac81611681565b82525050565b60006020820190506116c760008301846116a3565b92915050565b6116d68161111a565b82525050565b60006080820190506116f160008301876116cd565b6116fe60208301866116cd565b61170b6040830185611643565b6117186060830184611643565b95945050505050565b61172a816114bb565b82525050565b600081519050919050565b600082825260208201905092915050565b600061175782611730565b611761818561173b565b9350611771818560208601611436565b61177a8161124e565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6117ba8161111a565b82525050565b6117c981611158565b82525050565b6040820160008201516117e560008501826117b1565b5060208201516117f860208501826117c0565b50505050565b600061180a83836117cf565b60408301905092915050565b6000602082019050919050565b600061182e82611785565b6118388185611790565b9350611843836117a1565b8060005b8381101561187457815161185b88826117fe565b975061186683611816565b925050600181019050611847565b5085935050505092915050565b600060a083016000830151848203600086015261189e828261174c565b915050602083015184820360208601526118b8828261174c565b915050604083015184820360408601526118d28282611823565b91505060608301516118e760608601826117b1565b50608083015184820360808601526118ff828261174c565b9150508091505092915050565b60006040820190506119216000830185611721565b81810360208301526119338184611881565b90509392505050565b60008151905061194b81611162565b92915050565b600060208284031215611967576119666110f0565b5b60006119758482850161193c565b91505092915050565b60006040820190506119936000830185611643565b6119a06020830184611643565b9392505050565b60006040820190506119bc60008301856116cd565b6119c96020830184611643565b9392505050565b60008115159050919050565b6119e5816119d0565b81146119f057600080fd5b50565b600081519050611a02816119dc565b92915050565b600060208284031215611a1e57611a1d6110f0565b5b6000611a2c848285016119f3565b91505092915050565b611a3e816113e6565b8114611a4957600080fd5b50565b600081519050611a5b81611a35565b92915050565b600060208284031215611a7757611a766110f0565b5b6000611a8584828501611a4c565b91505092915050565b600060a082019050611aa360008301886116cd565b611ab060208301876116cd565b611abd6040830186611643565b611aca60608301856116cd565b611ad76080830184611643565b9695505050505050565b6000602082019050611af660008301846116cd565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602082016000820151611b4160008501826117c0565b50505050565b6000602082019050611b5c6000830184611b2b565b92915050565b600081905092915050565b6000611b7882611730565b611b828185611b62565b9350611b92818560208601611436565b80840191505092915050565b6000611baa8284611b6d565b91508190509291505056fea2646970667358221220a274057cac49cdffc00d2859aeabf20763e61bece84c98ef33d1c7f8a57aa6e264736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "swap(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "a for amoy, b for base sepolia, c for fuji"
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}